/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_wallets_evm_connectors_token-bound-smart-wallet_dist_thirdweb-dev-w-bf3fe4"],{

/***/ "./node_modules/@account-abstraction/sdk/dist/src/BaseAccountAPI.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/BaseAccountAPI.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseAccountAPI = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst contracts_1 = __webpack_require__(/*! @account-abstraction/contracts */ \"./node_modules/@account-abstraction/contracts/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst utils_2 = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\nconst calcPreVerificationGas_1 = __webpack_require__(/*! ./calcPreVerificationGas */ \"./node_modules/@account-abstraction/sdk/dist/src/calcPreVerificationGas.js\");\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n    /**\n     * base constructor.\n     * subclass SHOULD add parameters that define the owner (signer) of this wallet\n     */\n    constructor(params) {\n        this.isPhantom = true;\n        this.provider = params.provider;\n        this.overheads = params.overheads;\n        this.entryPointAddress = params.entryPointAddress;\n        this.accountAddress = params.accountAddress;\n        this.paymasterAPI = params.paymasterAPI;\n        // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n        this.entryPointView = contracts_1.EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers_1.ethers.constants.AddressZero);\n    }\n    async init() {\n        if (await this.provider.getCode(this.entryPointAddress) === '0x') {\n            throw new Error(`entryPoint not deployed at ${this.entryPointAddress}`);\n        }\n        await this.getAccountAddress();\n        return this;\n    }\n    /**\n     * check if the contract is already deployed.\n     */\n    async checkAccountPhantom() {\n        if (!this.isPhantom) {\n            // already deployed. no need to check anymore.\n            return this.isPhantom;\n        }\n        const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n        if (senderAddressCode.length > 2) {\n            // console.log(`SimpleAccount Contract already deployed at ${this.senderAddress}`)\n            this.isPhantom = false;\n        }\n        else {\n            // console.log(`SimpleAccount Contract is NOT YET deployed at ${this.senderAddress} - working in \"phantom account\" mode.`)\n        }\n        return this.isPhantom;\n    }\n    /**\n     * calculate the account address even before it is deployed\n     */\n    async getCounterFactualAddress() {\n        const initCode = this.getAccountInitCode();\n        // use entryPoint to query account address (factory can provide a helper method to do the same, but\n        // this method attempts to be generic\n        try {\n            await this.entryPointView.callStatic.getSenderAddress(initCode);\n        }\n        catch (e) {\n            return e.errorArgs.sender;\n        }\n        throw new Error('must handle revert');\n    }\n    /**\n     * return initCode value to into the UserOp.\n     * (either deployment code, or empty hex if contract already deployed)\n     */\n    async getInitCode() {\n        if (await this.checkAccountPhantom()) {\n            return await this.getAccountInitCode();\n        }\n        return '0x';\n    }\n    /**\n     * return maximum gas used for verification.\n     * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n     */\n    async getVerificationGasLimit() {\n        return 100000;\n    }\n    /**\n     * should cover cost of putting calldata on-chain, and some overhead.\n     * actual overhead depends on the expected bundle size\n     */\n    async getPreVerificationGas(userOp) {\n        const p = await (0, utils_1.resolveProperties)(userOp);\n        return (0, calcPreVerificationGas_1.calcPreVerificationGas)(p, this.overheads);\n    }\n    /**\n     * ABI-encode a user operation. used for calldata cost estimation\n     */\n    packUserOp(userOp) {\n        return (0, utils_2.packUserOp)(userOp, false);\n    }\n    async encodeUserOpCallDataAndGasLimit(detailsForUserOp) {\n        var _a, _b;\n        function parseNumber(a) {\n            if (a == null || a === '')\n                return null;\n            return ethers_1.BigNumber.from(a.toString());\n        }\n        const value = (_a = parseNumber(detailsForUserOp.value)) !== null && _a !== void 0 ? _a : ethers_1.BigNumber.from(0);\n        const callData = await this.encodeExecute(detailsForUserOp.target, value, detailsForUserOp.data);\n        const callGasLimit = (_b = parseNumber(detailsForUserOp.gasLimit)) !== null && _b !== void 0 ? _b : await this.provider.estimateGas({\n            from: this.entryPointAddress,\n            to: this.getAccountAddress(),\n            data: callData\n        });\n        return {\n            callData,\n            callGasLimit\n        };\n    }\n    /**\n     * return userOpHash for signing.\n     * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n     * @param userOp userOperation, (signature field ignored)\n     */\n    async getUserOpHash(userOp) {\n        const op = await (0, utils_1.resolveProperties)(userOp);\n        const chainId = await this.provider.getNetwork().then(net => net.chainId);\n        return (0, utils_2.getUserOpHash)(op, this.entryPointAddress, chainId);\n    }\n    /**\n     * return the account's address.\n     * this value is valid even before deploying the contract.\n     */\n    async getAccountAddress() {\n        if (this.senderAddress == null) {\n            if (this.accountAddress != null) {\n                this.senderAddress = this.accountAddress;\n            }\n            else {\n                this.senderAddress = await this.getCounterFactualAddress();\n            }\n        }\n        return this.senderAddress;\n    }\n    async estimateCreationGas(initCode) {\n        if (initCode == null || initCode === '0x')\n            return 0;\n        const deployerAddress = initCode.substring(0, 42);\n        const deployerCallData = '0x' + initCode.substring(42);\n        return await this.provider.estimateGas({ to: deployerAddress, data: deployerCallData });\n    }\n    /**\n     * create a UserOperation, filling all details (except signature)\n     * - if account is not yet created, add initCode to deploy it.\n     * - if gas or nonce are missing, read them from the chain (note that we can't fill gaslimit before the account is created)\n     * @param info\n     */\n    async createUnsignedUserOp(info) {\n        var _a, _b;\n        const { callData, callGasLimit } = await this.encodeUserOpCallDataAndGasLimit(info);\n        const initCode = await this.getInitCode();\n        const initGas = await this.estimateCreationGas(initCode);\n        const verificationGasLimit = ethers_1.BigNumber.from(await this.getVerificationGasLimit())\n            .add(initGas);\n        let { maxFeePerGas, maxPriorityFeePerGas } = info;\n        if (maxFeePerGas == null || maxPriorityFeePerGas == null) {\n            const feeData = await this.provider.getFeeData();\n            if (maxFeePerGas == null) {\n                maxFeePerGas = (_a = feeData.maxFeePerGas) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (maxPriorityFeePerGas == null) {\n                maxPriorityFeePerGas = (_b = feeData.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : undefined;\n            }\n        }\n        const partialUserOp = {\n            sender: this.getAccountAddress(),\n            nonce: this.getNonce(),\n            initCode,\n            callData,\n            callGasLimit,\n            verificationGasLimit,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            paymasterAndData: '0x'\n        };\n        let paymasterAndData;\n        if (this.paymasterAPI != null) {\n            // fill (partial) preVerificationGas (all except the cost of the generated paymasterAndData)\n            const userOpForPm = Object.assign(Object.assign({}, partialUserOp), { preVerificationGas: await this.getPreVerificationGas(partialUserOp) });\n            paymasterAndData = await this.paymasterAPI.getPaymasterAndData(userOpForPm);\n        }\n        partialUserOp.paymasterAndData = paymasterAndData !== null && paymasterAndData !== void 0 ? paymasterAndData : '0x';\n        return Object.assign(Object.assign({}, partialUserOp), { preVerificationGas: this.getPreVerificationGas(partialUserOp), signature: '' });\n    }\n    /**\n     * Sign the filled userOp.\n     * @param userOp the UserOperation to sign (with signature field ignored)\n     */\n    async signUserOp(userOp) {\n        const userOpHash = await this.getUserOpHash(userOp);\n        const signature = this.signUserOpHash(userOpHash);\n        return Object.assign(Object.assign({}, userOp), { signature });\n    }\n    /**\n     * helper method: create and sign a user operation.\n     * @param info transaction details for the userOp\n     */\n    async createSignedUserOp(info) {\n        return await this.signUserOp(await this.createUnsignedUserOp(info));\n    }\n    /**\n     * get the transaction that has this userOpHash mined, or null if not found\n     * @param userOpHash returned by sendUserOpToBundler (or by getUserOpHash..)\n     * @param timeout stop waiting after this timeout\n     * @param interval time to wait between polls.\n     * @return the transactionHash this userOp was mined, or null if not found.\n     */\n    async getUserOpReceipt(userOpHash, timeout = 30000, interval = 5000) {\n        const endtime = Date.now() + timeout;\n        while (Date.now() < endtime) {\n            const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n            if (events.length > 0) {\n                return events[0].transactionHash;\n            }\n            await new Promise(resolve => setTimeout(resolve, interval));\n        }\n        return null;\n    }\n}\nexports.BaseAccountAPI = BaseAccountAPI;\n//# sourceMappingURL=BaseAccountAPI.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/BaseAccountAPI.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/DeterministicDeployer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/DeterministicDeployer.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeterministicDeployer = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\n/**\n * wrapper class for Arachnid's deterministic deployer\n * (deterministic deployer used by 'hardhat-deployer'. generates the same addresses as \"hardhat-deploy\")\n */\nclass DeterministicDeployer {\n    static getAddress(ctrCode, salt = 0, params = []) {\n        return DeterministicDeployer.getDeterministicDeployAddress(ctrCode, salt, params);\n    }\n    static async deploy(ctrCode, salt = 0, params = []) {\n        return await DeterministicDeployer.instance.deterministicDeploy(ctrCode, salt, params);\n    }\n    constructor(provider) {\n        this.provider = provider;\n    }\n    async isContractDeployed(address) {\n        return await this.provider.getCode(address).then(code => code.length > 2);\n    }\n    async isDeployerDeployed() {\n        return await this.isContractDeployed(DeterministicDeployer.proxyAddress);\n    }\n    async deployFactory() {\n        if (await this.isContractDeployed(DeterministicDeployer.proxyAddress)) {\n            return;\n        }\n        const bal = await this.provider.getBalance(DeterministicDeployer.deploymentSignerAddress);\n        const neededBalance = ethers_1.BigNumber.from(DeterministicDeployer.deploymentGasLimit).mul(DeterministicDeployer.deploymentGasPrice);\n        const signer = this.provider.getSigner();\n        if (bal.lt(neededBalance)) {\n            await signer.sendTransaction({\n                to: DeterministicDeployer.deploymentSignerAddress,\n                value: neededBalance,\n                gasLimit: DeterministicDeployer.deploymentGasLimit\n            });\n        }\n        await this.provider.send('eth_sendRawTransaction', [DeterministicDeployer.deploymentTransaction]);\n        if (!await this.isContractDeployed(DeterministicDeployer.proxyAddress)) {\n            throw new Error('raw TX didn\\'t deploy deployer!');\n        }\n    }\n    async getDeployTransaction(ctrCode, salt = 0, params = []) {\n        await this.deployFactory();\n        const saltEncoded = (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(salt), 32);\n        const ctrEncoded = DeterministicDeployer.getCtrCode(ctrCode, params);\n        return {\n            to: DeterministicDeployer.proxyAddress,\n            data: (0, utils_1.hexConcat)([\n                saltEncoded,\n                ctrEncoded\n            ])\n        };\n    }\n    static getCtrCode(ctrCode, params) {\n        if (typeof ctrCode !== 'string') {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return (0, utils_1.hexlify)(ctrCode.getDeployTransaction(...params).data);\n        }\n        else {\n            if (params.length !== 0) {\n                throw new Error('constructor params can only be passed to ContractFactory');\n            }\n            return ctrCode;\n        }\n    }\n    static getDeterministicDeployAddress(ctrCode, salt = 0, params = []) {\n        // this method works only before the contract is already deployed:\n        // return await this.provider.call(await this.getDeployTransaction(ctrCode, salt))\n        const saltEncoded = (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(salt), 32);\n        const ctrCode1 = DeterministicDeployer.getCtrCode(ctrCode, params);\n        return '0x' + (0, utils_1.keccak256)((0, utils_1.hexConcat)([\n            '0xff',\n            DeterministicDeployer.proxyAddress,\n            saltEncoded,\n            (0, utils_1.keccak256)(ctrCode1)\n        ])).slice(-40);\n    }\n    async deterministicDeploy(ctrCode, salt = 0, params = []) {\n        const addr = DeterministicDeployer.getDeterministicDeployAddress(ctrCode, salt, params);\n        if (!await this.isContractDeployed(addr)) {\n            await this.provider.getSigner().sendTransaction(await this.getDeployTransaction(ctrCode, salt, params));\n        }\n        return addr;\n    }\n    static init(provider) {\n        this._instance = new DeterministicDeployer(provider);\n    }\n    static get instance() {\n        if (this._instance == null) {\n            throw new Error('must call \"DeterministicDeployer.init(ethers.provider)\" first');\n        }\n        return this._instance;\n    }\n}\nexports.DeterministicDeployer = DeterministicDeployer;\n// from: https://github.com/Arachnid/deterministic-deployment-proxy\nDeterministicDeployer.proxyAddress = '0x4e59b44847b379578588920ca78fbf26c0b4956c';\nDeterministicDeployer.deploymentTransaction = '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222';\nDeterministicDeployer.deploymentSignerAddress = '0x3fab184622dc19b6109349b94811493bf2a45362';\nDeterministicDeployer.deploymentGasPrice = 100e9;\nDeterministicDeployer.deploymentGasLimit = 100000;\n//# sourceMappingURL=DeterministicDeployer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/DeterministicDeployer.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersProvider.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersProvider.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC4337EthersProvider = void 0;\nconst providers_1 = __webpack_require__(/*! @ethersproject/providers */ \"./node_modules/@ethersproject/providers/lib.esm/index.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst ERC4337EthersSigner_1 = __webpack_require__(/*! ./ERC4337EthersSigner */ \"./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersSigner.js\");\nconst UserOperationEventListener_1 = __webpack_require__(/*! ./UserOperationEventListener */ \"./node_modules/@account-abstraction/sdk/dist/src/UserOperationEventListener.js\");\nconst utils_2 = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst debug = (0, debug_1.default)('aa.provider');\nclass ERC4337EthersProvider extends providers_1.BaseProvider {\n    constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n        super({\n            name: 'ERC-4337 Custom Network',\n            chainId\n        });\n        this.chainId = chainId;\n        this.config = config;\n        this.originalSigner = originalSigner;\n        this.originalProvider = originalProvider;\n        this.httpRpcClient = httpRpcClient;\n        this.entryPoint = entryPoint;\n        this.smartAccountAPI = smartAccountAPI;\n        this.signer = new ERC4337EthersSigner_1.ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n    }\n    /**\n     * finish intializing the provider.\n     * MUST be called after construction, before using the provider.\n     */\n    async init() {\n        // await this.httpRpcClient.validateChainId()\n        this.initializedBlockNumber = await this.originalProvider.getBlockNumber();\n        await this.smartAccountAPI.init();\n        // await this.signer.init()\n        return this;\n    }\n    getSigner() {\n        return this.signer;\n    }\n    async perform(method, params) {\n        debug('perform', method, params);\n        if (method === 'sendTransaction' || method === 'getTransactionReceipt') {\n            // TODO: do we need 'perform' method to be available at all?\n            // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n            throw new Error('Should not get here. Investigate.');\n        }\n        return await this.originalProvider.perform(method, params);\n    }\n    async getTransaction(transactionHash) {\n        // TODO\n        return await super.getTransaction(transactionHash);\n    }\n    async getTransactionReceipt(transactionHash) {\n        const userOpHash = await transactionHash;\n        const sender = await this.getSenderAccountAddress();\n        return await new Promise((resolve, reject) => {\n            new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n        });\n    }\n    async getSenderAccountAddress() {\n        return await this.smartAccountAPI.getAccountAddress();\n    }\n    async waitForTransaction(transactionHash, confirmations, timeout) {\n        const sender = await this.getSenderAccountAddress();\n        return await new Promise((resolve, reject) => {\n            const listener = new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n            listener.start();\n        });\n    }\n    // fabricate a response in a format usable by ethers users...\n    async constructUserOpTransactionResponse(userOp1) {\n        const userOp = await (0, utils_1.resolveProperties)(userOp1);\n        const userOpHash = (0, utils_2.getUserOpHash)(userOp, this.config.entryPointAddress, this.chainId);\n        const waitPromise = new Promise((resolve, reject) => {\n            new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n        });\n        return {\n            hash: userOpHash,\n            confirmations: 0,\n            from: userOp.sender,\n            nonce: ethers_1.BigNumber.from(userOp.nonce).toNumber(),\n            gasLimit: ethers_1.BigNumber.from(userOp.callGasLimit),\n            value: ethers_1.BigNumber.from(0),\n            data: (0, utils_1.hexValue)(userOp.callData),\n            chainId: this.chainId,\n            wait: async (confirmations) => {\n                const transactionReceipt = await waitPromise;\n                if (userOp.initCode.length !== 0) {\n                    // checking if the wallet has been deployed by the transaction; it must be if we are here\n                    await this.smartAccountAPI.checkAccountPhantom();\n                }\n                return transactionReceipt;\n            }\n        };\n    }\n    async detectNetwork() {\n        return this.originalProvider.detectNetwork();\n    }\n}\nexports.ERC4337EthersProvider = ERC4337EthersProvider;\n//# sourceMappingURL=ERC4337EthersProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersProvider.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersSigner.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersSigner.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC4337EthersSigner = void 0;\nconst properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"./node_modules/@ethersproject/properties/lib.esm/index.js\");\nconst abstract_signer_1 = __webpack_require__(/*! @ethersproject/abstract-signer */ \"./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\nclass ERC4337EthersSigner extends abstract_signer_1.Signer {\n    // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n    constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n        super();\n        this.config = config;\n        this.originalSigner = originalSigner;\n        this.erc4337provider = erc4337provider;\n        this.httpRpcClient = httpRpcClient;\n        this.smartAccountAPI = smartAccountAPI;\n        (0, properties_1.defineReadOnly)(this, 'provider', erc4337provider);\n    }\n    // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n    async sendTransaction(transaction) {\n        var _a, _b, _c;\n        const tx = await this.populateTransaction(transaction);\n        await this.verifyAllNecessaryFields(tx);\n        const userOperation = await this.smartAccountAPI.createSignedUserOp({\n            target: (_a = tx.to) !== null && _a !== void 0 ? _a : '',\n            data: (_c = (_b = tx.data) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : '',\n            value: tx.value,\n            gasLimit: tx.gasLimit\n        });\n        const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n        try {\n            await this.httpRpcClient.sendUserOpToBundler(userOperation);\n        }\n        catch (error) {\n            // console.error('sendUserOpToBundler failed', error)\n            throw this.unwrapError(error);\n        }\n        // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n        return transactionResponse;\n    }\n    unwrapError(errorIn) {\n        var _a;\n        if (errorIn.body != null) {\n            const errorBody = JSON.parse(errorIn.body);\n            let paymasterInfo = '';\n            let failedOpMessage = (_a = errorBody === null || errorBody === void 0 ? void 0 : errorBody.error) === null || _a === void 0 ? void 0 : _a.message;\n            if ((failedOpMessage === null || failedOpMessage === void 0 ? void 0 : failedOpMessage.includes('FailedOp')) === true) {\n                // TODO: better error extraction methods will be needed\n                const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n                if (matched != null) {\n                    const split = matched[1].split(',');\n                    paymasterInfo = `(paymaster address: ${split[1]})`;\n                    failedOpMessage = split[2];\n                }\n            }\n            const error = new Error(`The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo})`);\n            error.stack = errorIn.stack;\n            return error;\n        }\n        return errorIn;\n    }\n    async verifyAllNecessaryFields(transactionRequest) {\n        if (transactionRequest.to == null) {\n            throw new Error('Missing call target');\n        }\n        if (transactionRequest.data == null && transactionRequest.value == null) {\n            // TBD: banning no-op UserOps seems to make sense on provider level\n            throw new Error('Missing call data or value');\n        }\n    }\n    connect(provider) {\n        throw new Error('changing providers is not supported');\n    }\n    async getAddress() {\n        if (this.address == null) {\n            this.address = await this.erc4337provider.getSenderAccountAddress();\n        }\n        return this.address;\n    }\n    async signMessage(message) {\n        return await this.originalSigner.signMessage(message);\n    }\n    async signTransaction(transaction) {\n        throw new Error('not implemented');\n    }\n    async signUserOperation(userOperation) {\n        const message = await this.smartAccountAPI.getUserOpHash(userOperation);\n        return await this.originalSigner.signMessage(message);\n    }\n}\nexports.ERC4337EthersSigner = ERC4337EthersSigner;\n//# sourceMappingURL=ERC4337EthersSigner.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL0VSQzQzMzdFdGhlcnNTaWduZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLHFCQUFxQixtQkFBTyxDQUFDLDRGQUEyQjtBQUN4RCwwQkFBMEIsbUJBQU8sQ0FBQyxzR0FBZ0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELFNBQVM7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLGlCQUFpQixFQUFFLGNBQWM7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3Nkay9kaXN0L3NyYy9FUkM0MzM3RXRoZXJzU2lnbmVyLmpzPzg0Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVSQzQzMzdFdGhlcnNTaWduZXIgPSB2b2lkIDA7XG5jb25zdCBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiKTtcbmNvbnN0IGFic3RyYWN0X3NpZ25lcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXNpZ25lclwiKTtcbmNsYXNzIEVSQzQzMzdFdGhlcnNTaWduZXIgZXh0ZW5kcyBhYnN0cmFjdF9zaWduZXJfMS5TaWduZXIge1xuICAgIC8vIFRPRE86IHdlIGhhdmUgJ2VyYzQzMzdwcm92aWRlcicsIHJlbW92ZSBzaGFyZWQgZGVwZW5kZW5jaWVzIG9yIGF2b2lkIHR3by13YXkgcmVmZXJlbmNlXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBvcmlnaW5hbFNpZ25lciwgZXJjNDMzN3Byb3ZpZGVyLCBodHRwUnBjQ2xpZW50LCBzbWFydEFjY291bnRBUEkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTaWduZXIgPSBvcmlnaW5hbFNpZ25lcjtcbiAgICAgICAgdGhpcy5lcmM0MzM3cHJvdmlkZXIgPSBlcmM0MzM3cHJvdmlkZXI7XG4gICAgICAgIHRoaXMuaHR0cFJwY0NsaWVudCA9IGh0dHBScGNDbGllbnQ7XG4gICAgICAgIHRoaXMuc21hcnRBY2NvdW50QVBJID0gc21hcnRBY2NvdW50QVBJO1xuICAgICAgICAoMCwgcHJvcGVydGllc18xLmRlZmluZVJlYWRPbmx5KSh0aGlzLCAncHJvdmlkZXInLCBlcmM0MzM3cHJvdmlkZXIpO1xuICAgIH1cbiAgICAvLyBUaGlzIG9uZSBpcyBjYWxsZWQgYnkgQ29udHJhY3QuIEl0IHNpZ25zIHRoZSByZXF1ZXN0IGFuZCBwYXNzZXMgaW4gdG8gUHJvdmlkZXIgdG8gYmUgc2VudC5cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgYXdhaXQgdGhpcy52ZXJpZnlBbGxOZWNlc3NhcnlGaWVsZHModHgpO1xuICAgICAgICBjb25zdCB1c2VyT3BlcmF0aW9uID0gYXdhaXQgdGhpcy5zbWFydEFjY291bnRBUEkuY3JlYXRlU2lnbmVkVXNlck9wKHtcbiAgICAgICAgICAgIHRhcmdldDogKF9hID0gdHgudG8pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnLFxuICAgICAgICAgICAgZGF0YTogKF9jID0gKF9iID0gdHguZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRvU3RyaW5nKCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnLFxuICAgICAgICAgICAgdmFsdWU6IHR4LnZhbHVlLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IHR4Lmdhc0xpbWl0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvblJlc3BvbnNlID0gYXdhaXQgdGhpcy5lcmM0MzM3cHJvdmlkZXIuY29uc3RydWN0VXNlck9wVHJhbnNhY3Rpb25SZXNwb25zZSh1c2VyT3BlcmF0aW9uKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaHR0cFJwY0NsaWVudC5zZW5kVXNlck9wVG9CdW5kbGVyKHVzZXJPcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcignc2VuZFVzZXJPcFRvQnVuZGxlciBmYWlsZWQnLCBlcnJvcilcbiAgICAgICAgICAgIHRocm93IHRoaXMudW53cmFwRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGhhbmRsZSBlcnJvcnMgLSB0cmFuc2FjdGlvbiB0aGF0IGlzIFwicmVqZWN0ZWRcIiBieSBidW5kbGVyIGlzIF9ub3QgbGlrZWx5XyB0byBldmVyIHJlc29sdmUgaXRzIFwid2FpdCgpXCJcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uUmVzcG9uc2U7XG4gICAgfVxuICAgIHVud3JhcEVycm9yKGVycm9ySW4pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZXJyb3JJbi5ib2R5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQm9keSA9IEpTT04ucGFyc2UoZXJyb3JJbi5ib2R5KTtcbiAgICAgICAgICAgIGxldCBwYXltYXN0ZXJJbmZvID0gJyc7XG4gICAgICAgICAgICBsZXQgZmFpbGVkT3BNZXNzYWdlID0gKF9hID0gZXJyb3JCb2R5ID09PSBudWxsIHx8IGVycm9yQm9keSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JCb2R5LmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVzc2FnZTtcbiAgICAgICAgICAgIGlmICgoZmFpbGVkT3BNZXNzYWdlID09PSBudWxsIHx8IGZhaWxlZE9wTWVzc2FnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmFpbGVkT3BNZXNzYWdlLmluY2x1ZGVzKCdGYWlsZWRPcCcpKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IGJldHRlciBlcnJvciBleHRyYWN0aW9uIG1ldGhvZHMgd2lsbCBiZSBuZWVkZWRcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVkID0gZmFpbGVkT3BNZXNzYWdlLm1hdGNoKC9GYWlsZWRPcFxcKCguKilcXCkvKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gbWF0Y2hlZFsxXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXltYXN0ZXJJbmZvID0gYChwYXltYXN0ZXIgYWRkcmVzczogJHtzcGxpdFsxXX0pYDtcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkT3BNZXNzYWdlID0gc3BsaXRbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYFRoZSBidW5kbGVyIGhhcyBmYWlsZWQgdG8gaW5jbHVkZSBVc2VyT3BlcmF0aW9uIGluIGEgYmF0Y2g6ICR7ZmFpbGVkT3BNZXNzYWdlfSAke3BheW1hc3RlckluZm99KWApO1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBlcnJvckluLnN0YWNrO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvckluO1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnlBbGxOZWNlc3NhcnlGaWVsZHModHJhbnNhY3Rpb25SZXF1ZXN0KSB7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvblJlcXVlc3QudG8gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGNhbGwgdGFyZ2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uUmVxdWVzdC5kYXRhID09IG51bGwgJiYgdHJhbnNhY3Rpb25SZXF1ZXN0LnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFRCRDogYmFubmluZyBuby1vcCBVc2VyT3BzIHNlZW1zIHRvIG1ha2Ugc2Vuc2Ugb24gcHJvdmlkZXIgbGV2ZWxcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBjYWxsIGRhdGEgb3IgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2hhbmdpbmcgcHJvdmlkZXJzIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWRkcmVzcygpIHtcbiAgICAgICAgaWYgKHRoaXMuYWRkcmVzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MgPSBhd2FpdCB0aGlzLmVyYzQzMzdwcm92aWRlci5nZXRTZW5kZXJBY2NvdW50QWRkcmVzcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMub3JpZ2luYWxTaWduZXIuc2lnbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICBhc3luYyBzaWduVXNlck9wZXJhdGlvbih1c2VyT3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCB0aGlzLnNtYXJ0QWNjb3VudEFQSS5nZXRVc2VyT3BIYXNoKHVzZXJPcGVyYXRpb24pO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5vcmlnaW5hbFNpZ25lci5zaWduTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG59XG5leHBvcnRzLkVSQzQzMzdFdGhlcnNTaWduZXIgPSBFUkM0MzM3RXRoZXJzU2lnbmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RVJDNDMzN0V0aGVyc1NpZ25lci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersSigner.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/HttpRpcClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/HttpRpcClient.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpRpcClient = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst utils_2 = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\nconst debug = (0, debug_1.default)('aa.rpc');\nclass HttpRpcClient {\n    constructor(bundlerUrl, entryPointAddress, chainId) {\n        this.bundlerUrl = bundlerUrl;\n        this.entryPointAddress = entryPointAddress;\n        this.chainId = chainId;\n        this.userOpJsonRpcProvider = new ethers_1.ethers.providers.JsonRpcProvider(this.bundlerUrl, {\n            name: 'Connected bundler network',\n            chainId\n        });\n        this.initializing = this.validateChainId();\n    }\n    async validateChainId() {\n        // validate chainId is in sync with expected chainid\n        const chain = await this.userOpJsonRpcProvider.send('eth_chainId', []);\n        const bundlerChain = parseInt(chain);\n        if (bundlerChain !== this.chainId) {\n            throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n        }\n    }\n    /**\n     * send a UserOperation to the bundler\n     * @param userOp1\n     * @return userOpHash the id of this operation, for getUserOperationTransaction\n     */\n    async sendUserOpToBundler(userOp1) {\n        await this.initializing;\n        const hexifiedUserOp = (0, utils_2.deepHexlify)(await (0, utils_1.resolveProperties)(userOp1));\n        const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n        await this.printUserOperation('eth_sendUserOperation', jsonRequestData);\n        return await this.userOpJsonRpcProvider\n            .send('eth_sendUserOperation', [hexifiedUserOp, this.entryPointAddress]);\n    }\n    async estimateUserOpGas(userOp1) {\n        await this.initializing;\n        const hexifiedUserOp = (0, utils_2.deepHexlify)(await (0, utils_1.resolveProperties)(userOp1));\n        const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n        await this.printUserOperation('eth_estimateUserOperationGas', jsonRequestData);\n        return await this.userOpJsonRpcProvider\n            .send('eth_estimateUserOperationGas', [hexifiedUserOp, this.entryPointAddress]);\n    }\n    async printUserOperation(method, [userOp1, entryPointAddress]) {\n        const userOp = await (0, utils_1.resolveProperties)(userOp1);\n        debug('sending', method, Object.assign({}, userOp\n        // initCode: (userOp.initCode ?? '').length,\n        // callData: (userOp.callData ?? '').length\n        ), entryPointAddress);\n    }\n}\nexports.HttpRpcClient = HttpRpcClient;\n//# sourceMappingURL=HttpRpcClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL0h0dHBScGNDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsaUJBQWlCLG1CQUFPLENBQUMsc0RBQVE7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsNERBQWtCO0FBQzFDLGdDQUFnQyxtQkFBTyxDQUFDLGtEQUFPO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLCtGQUE0QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsaUJBQWlCLGdCQUFnQixhQUFhLCtCQUErQixhQUFhO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3Nkay9kaXN0L3NyYy9IdHRwUnBjQ2xpZW50LmpzPzQ4OGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh0dHBScGNDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcImV0aGVycy9saWIvdXRpbHNcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIkBhY2NvdW50LWFic3RyYWN0aW9uL3V0aWxzXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnYWEucnBjJyk7XG5jbGFzcyBIdHRwUnBjQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihidW5kbGVyVXJsLCBlbnRyeVBvaW50QWRkcmVzcywgY2hhaW5JZCkge1xuICAgICAgICB0aGlzLmJ1bmRsZXJVcmwgPSBidW5kbGVyVXJsO1xuICAgICAgICB0aGlzLmVudHJ5UG9pbnRBZGRyZXNzID0gZW50cnlQb2ludEFkZHJlc3M7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIHRoaXMudXNlck9wSnNvblJwY1Byb3ZpZGVyID0gbmV3IGV0aGVyc18xLmV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKHRoaXMuYnVuZGxlclVybCwge1xuICAgICAgICAgICAgbmFtZTogJ0Nvbm5lY3RlZCBidW5kbGVyIG5ldHdvcmsnLFxuICAgICAgICAgICAgY2hhaW5JZFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXppbmcgPSB0aGlzLnZhbGlkYXRlQ2hhaW5JZCgpO1xuICAgIH1cbiAgICBhc3luYyB2YWxpZGF0ZUNoYWluSWQoKSB7XG4gICAgICAgIC8vIHZhbGlkYXRlIGNoYWluSWQgaXMgaW4gc3luYyB3aXRoIGV4cGVjdGVkIGNoYWluaWRcbiAgICAgICAgY29uc3QgY2hhaW4gPSBhd2FpdCB0aGlzLnVzZXJPcEpzb25ScGNQcm92aWRlci5zZW5kKCdldGhfY2hhaW5JZCcsIFtdKTtcbiAgICAgICAgY29uc3QgYnVuZGxlckNoYWluID0gcGFyc2VJbnQoY2hhaW4pO1xuICAgICAgICBpZiAoYnVuZGxlckNoYWluICE9PSB0aGlzLmNoYWluSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYnVuZGxlciAke3RoaXMuYnVuZGxlclVybH0gaXMgb24gY2hhaW5JZCAke2J1bmRsZXJDaGFpbn0sIGJ1dCBwcm92aWRlciBpcyBvbiBjaGFpbklkICR7dGhpcy5jaGFpbklkfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHNlbmQgYSBVc2VyT3BlcmF0aW9uIHRvIHRoZSBidW5kbGVyXG4gICAgICogQHBhcmFtIHVzZXJPcDFcbiAgICAgKiBAcmV0dXJuIHVzZXJPcEhhc2ggdGhlIGlkIG9mIHRoaXMgb3BlcmF0aW9uLCBmb3IgZ2V0VXNlck9wZXJhdGlvblRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgc2VuZFVzZXJPcFRvQnVuZGxlcih1c2VyT3AxKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6aW5nO1xuICAgICAgICBjb25zdCBoZXhpZmllZFVzZXJPcCA9ICgwLCB1dGlsc18yLmRlZXBIZXhsaWZ5KShhd2FpdCAoMCwgdXRpbHNfMS5yZXNvbHZlUHJvcGVydGllcykodXNlck9wMSkpO1xuICAgICAgICBjb25zdCBqc29uUmVxdWVzdERhdGEgPSBbaGV4aWZpZWRVc2VyT3AsIHRoaXMuZW50cnlQb2ludEFkZHJlc3NdO1xuICAgICAgICBhd2FpdCB0aGlzLnByaW50VXNlck9wZXJhdGlvbignZXRoX3NlbmRVc2VyT3BlcmF0aW9uJywganNvblJlcXVlc3REYXRhKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudXNlck9wSnNvblJwY1Byb3ZpZGVyXG4gICAgICAgICAgICAuc2VuZCgnZXRoX3NlbmRVc2VyT3BlcmF0aW9uJywgW2hleGlmaWVkVXNlck9wLCB0aGlzLmVudHJ5UG9pbnRBZGRyZXNzXSk7XG4gICAgfVxuICAgIGFzeW5jIGVzdGltYXRlVXNlck9wR2FzKHVzZXJPcDEpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXppbmc7XG4gICAgICAgIGNvbnN0IGhleGlmaWVkVXNlck9wID0gKDAsIHV0aWxzXzIuZGVlcEhleGxpZnkpKGF3YWl0ICgwLCB1dGlsc18xLnJlc29sdmVQcm9wZXJ0aWVzKSh1c2VyT3AxKSk7XG4gICAgICAgIGNvbnN0IGpzb25SZXF1ZXN0RGF0YSA9IFtoZXhpZmllZFVzZXJPcCwgdGhpcy5lbnRyeVBvaW50QWRkcmVzc107XG4gICAgICAgIGF3YWl0IHRoaXMucHJpbnRVc2VyT3BlcmF0aW9uKCdldGhfZXN0aW1hdGVVc2VyT3BlcmF0aW9uR2FzJywganNvblJlcXVlc3REYXRhKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudXNlck9wSnNvblJwY1Byb3ZpZGVyXG4gICAgICAgICAgICAuc2VuZCgnZXRoX2VzdGltYXRlVXNlck9wZXJhdGlvbkdhcycsIFtoZXhpZmllZFVzZXJPcCwgdGhpcy5lbnRyeVBvaW50QWRkcmVzc10pO1xuICAgIH1cbiAgICBhc3luYyBwcmludFVzZXJPcGVyYXRpb24obWV0aG9kLCBbdXNlck9wMSwgZW50cnlQb2ludEFkZHJlc3NdKSB7XG4gICAgICAgIGNvbnN0IHVzZXJPcCA9IGF3YWl0ICgwLCB1dGlsc18xLnJlc29sdmVQcm9wZXJ0aWVzKSh1c2VyT3AxKTtcbiAgICAgICAgZGVidWcoJ3NlbmRpbmcnLCBtZXRob2QsIE9iamVjdC5hc3NpZ24oe30sIHVzZXJPcFxuICAgICAgICAvLyBpbml0Q29kZTogKHVzZXJPcC5pbml0Q29kZSA/PyAnJykubGVuZ3RoLFxuICAgICAgICAvLyBjYWxsRGF0YTogKHVzZXJPcC5jYWxsRGF0YSA/PyAnJykubGVuZ3RoXG4gICAgICAgICksIGVudHJ5UG9pbnRBZGRyZXNzKTtcbiAgICB9XG59XG5leHBvcnRzLkh0dHBScGNDbGllbnQgPSBIdHRwUnBjQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHR0cFJwY0NsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/HttpRpcClient.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/PaymasterAPI.js":
/*!************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/PaymasterAPI.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PaymasterAPI = void 0;\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {\n    /**\n     * @param userOp a partially-filled UserOperation (without signature and paymasterAndData\n     *  note that the \"preVerificationGas\" is incomplete: it can't account for the\n     *  paymasterAndData value, which will only be returned by this method..\n     * @returns the value to put into the PaymasterAndData, undefined to leave it empty\n     */\n    async getPaymasterAndData(userOp) {\n        return '0x';\n    }\n}\nexports.PaymasterAPI = PaymasterAPI;\n//# sourceMappingURL=PaymasterAPI.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL1BheW1hc3RlckFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL1BheW1hc3RlckFQSS5qcz85MmVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXltYXN0ZXJBUEkgPSB2b2lkIDA7XG4vKipcbiAqIGFuIEFQSSB0byBleHRlcm5hbCBhIFVzZXJPcGVyYXRpb24gd2l0aCBwYXltYXN0ZXIgaW5mb1xuICovXG5jbGFzcyBQYXltYXN0ZXJBUEkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB1c2VyT3AgYSBwYXJ0aWFsbHktZmlsbGVkIFVzZXJPcGVyYXRpb24gKHdpdGhvdXQgc2lnbmF0dXJlIGFuZCBwYXltYXN0ZXJBbmREYXRhXG4gICAgICogIG5vdGUgdGhhdCB0aGUgXCJwcmVWZXJpZmljYXRpb25HYXNcIiBpcyBpbmNvbXBsZXRlOiBpdCBjYW4ndCBhY2NvdW50IGZvciB0aGVcbiAgICAgKiAgcGF5bWFzdGVyQW5kRGF0YSB2YWx1ZSwgd2hpY2ggd2lsbCBvbmx5IGJlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kLi5cbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgdG8gcHV0IGludG8gdGhlIFBheW1hc3RlckFuZERhdGEsIHVuZGVmaW5lZCB0byBsZWF2ZSBpdCBlbXB0eVxuICAgICAqL1xuICAgIGFzeW5jIGdldFBheW1hc3RlckFuZERhdGEodXNlck9wKSB7XG4gICAgICAgIHJldHVybiAnMHgnO1xuICAgIH1cbn1cbmV4cG9ydHMuUGF5bWFzdGVyQVBJID0gUGF5bWFzdGVyQVBJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF5bWFzdGVyQVBJLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/PaymasterAPI.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/Provider.js":
/*!********************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/Provider.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wrapProvider = void 0;\nconst contracts_1 = __webpack_require__(/*! @account-abstraction/contracts */ \"./node_modules/@account-abstraction/contracts/dist/index.js\");\nconst SimpleAccountAPI_1 = __webpack_require__(/*! ./SimpleAccountAPI */ \"./node_modules/@account-abstraction/sdk/dist/src/SimpleAccountAPI.js\");\nconst ERC4337EthersProvider_1 = __webpack_require__(/*! ./ERC4337EthersProvider */ \"./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersProvider.js\");\nconst HttpRpcClient_1 = __webpack_require__(/*! ./HttpRpcClient */ \"./node_modules/@account-abstraction/sdk/dist/src/HttpRpcClient.js\");\nconst DeterministicDeployer_1 = __webpack_require__(/*! ./DeterministicDeployer */ \"./node_modules/@account-abstraction/sdk/dist/src/DeterministicDeployer.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst debug = (0, debug_1.default)('aa.wrapProvider');\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider the normal provider\n * @param config see ClientConfig for more info\n * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nasync function wrapProvider(originalProvider, config, originalSigner = originalProvider.getSigner()) {\n    const entryPoint = contracts_1.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n    // Initial SimpleAccount instance is not deployed and exists just for the interface\n    const detDeployer = new DeterministicDeployer_1.DeterministicDeployer(originalProvider);\n    const SimpleAccountFactory = await detDeployer.deterministicDeploy(new contracts_1.SimpleAccountFactory__factory(), 0, [entryPoint.address]);\n    const smartAccountAPI = new SimpleAccountAPI_1.SimpleAccountAPI({\n        provider: originalProvider,\n        entryPointAddress: entryPoint.address,\n        owner: originalSigner,\n        factoryAddress: SimpleAccountFactory,\n        paymasterAPI: config.paymasterAPI\n    });\n    debug('config=', config);\n    const chainId = await originalProvider.getNetwork().then(net => net.chainId);\n    const httpRpcClient = new HttpRpcClient_1.HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId);\n    return await new ERC4337EthersProvider_1.ERC4337EthersProvider(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI).init();\n}\nexports.wrapProvider = wrapProvider;\n//# sourceMappingURL=Provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL1Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG9CQUFvQixtQkFBTyxDQUFDLG1HQUFnQztBQUM1RCwyQkFBMkIsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDdkQsZ0NBQWdDLG1CQUFPLENBQUMsMEdBQXlCO0FBQ2pFLHdCQUF3QixtQkFBTyxDQUFDLDBGQUFpQjtBQUNqRCxnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBeUI7QUFDakUsZ0NBQWdDLG1CQUFPLENBQUMsa0RBQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3Nkay9kaXN0L3NyYy9Qcm92aWRlci5qcz8zMjY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53cmFwUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBjb250cmFjdHNfMSA9IHJlcXVpcmUoXCJAYWNjb3VudC1hYnN0cmFjdGlvbi9jb250cmFjdHNcIik7XG5jb25zdCBTaW1wbGVBY2NvdW50QVBJXzEgPSByZXF1aXJlKFwiLi9TaW1wbGVBY2NvdW50QVBJXCIpO1xuY29uc3QgRVJDNDMzN0V0aGVyc1Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9FUkM0MzM3RXRoZXJzUHJvdmlkZXJcIik7XG5jb25zdCBIdHRwUnBjQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9IdHRwUnBjQ2xpZW50XCIpO1xuY29uc3QgRGV0ZXJtaW5pc3RpY0RlcGxveWVyXzEgPSByZXF1aXJlKFwiLi9EZXRlcm1pbmlzdGljRGVwbG95ZXJcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdhYS53cmFwUHJvdmlkZXInKTtcbi8qKlxuICogd3JhcCBhbiBleGlzdGluZyBwcm92aWRlciB0byB0dW5uZWwgcmVxdWVzdHMgdGhyb3VnaCBBY2NvdW50IEFic3RyYWN0aW9uLlxuICogQHBhcmFtIG9yaWdpbmFsUHJvdmlkZXIgdGhlIG5vcm1hbCBwcm92aWRlclxuICogQHBhcmFtIGNvbmZpZyBzZWUgQ2xpZW50Q29uZmlnIGZvciBtb3JlIGluZm9cbiAqIEBwYXJhbSBvcmlnaW5hbFNpZ25lciB1c2UgdGhpcyBzaWduZXIgYXMgdGhlIG93bmVyLiBvZiB0aGlzIHdhbGxldC4gQnkgZGVmYXVsdCwgdXNlIHRoZSBwcm92aWRlcidzIHNpZ25lclxuICovXG5hc3luYyBmdW5jdGlvbiB3cmFwUHJvdmlkZXIob3JpZ2luYWxQcm92aWRlciwgY29uZmlnLCBvcmlnaW5hbFNpZ25lciA9IG9yaWdpbmFsUHJvdmlkZXIuZ2V0U2lnbmVyKCkpIHtcbiAgICBjb25zdCBlbnRyeVBvaW50ID0gY29udHJhY3RzXzEuRW50cnlQb2ludF9fZmFjdG9yeS5jb25uZWN0KGNvbmZpZy5lbnRyeVBvaW50QWRkcmVzcywgb3JpZ2luYWxQcm92aWRlcik7XG4gICAgLy8gSW5pdGlhbCBTaW1wbGVBY2NvdW50IGluc3RhbmNlIGlzIG5vdCBkZXBsb3llZCBhbmQgZXhpc3RzIGp1c3QgZm9yIHRoZSBpbnRlcmZhY2VcbiAgICBjb25zdCBkZXREZXBsb3llciA9IG5ldyBEZXRlcm1pbmlzdGljRGVwbG95ZXJfMS5EZXRlcm1pbmlzdGljRGVwbG95ZXIob3JpZ2luYWxQcm92aWRlcik7XG4gICAgY29uc3QgU2ltcGxlQWNjb3VudEZhY3RvcnkgPSBhd2FpdCBkZXREZXBsb3llci5kZXRlcm1pbmlzdGljRGVwbG95KG5ldyBjb250cmFjdHNfMS5TaW1wbGVBY2NvdW50RmFjdG9yeV9fZmFjdG9yeSgpLCAwLCBbZW50cnlQb2ludC5hZGRyZXNzXSk7XG4gICAgY29uc3Qgc21hcnRBY2NvdW50QVBJID0gbmV3IFNpbXBsZUFjY291bnRBUElfMS5TaW1wbGVBY2NvdW50QVBJKHtcbiAgICAgICAgcHJvdmlkZXI6IG9yaWdpbmFsUHJvdmlkZXIsXG4gICAgICAgIGVudHJ5UG9pbnRBZGRyZXNzOiBlbnRyeVBvaW50LmFkZHJlc3MsXG4gICAgICAgIG93bmVyOiBvcmlnaW5hbFNpZ25lcixcbiAgICAgICAgZmFjdG9yeUFkZHJlc3M6IFNpbXBsZUFjY291bnRGYWN0b3J5LFxuICAgICAgICBwYXltYXN0ZXJBUEk6IGNvbmZpZy5wYXltYXN0ZXJBUElcbiAgICB9KTtcbiAgICBkZWJ1ZygnY29uZmlnPScsIGNvbmZpZyk7XG4gICAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IG9yaWdpbmFsUHJvdmlkZXIuZ2V0TmV0d29yaygpLnRoZW4obmV0ID0+IG5ldC5jaGFpbklkKTtcbiAgICBjb25zdCBodHRwUnBjQ2xpZW50ID0gbmV3IEh0dHBScGNDbGllbnRfMS5IdHRwUnBjQ2xpZW50KGNvbmZpZy5idW5kbGVyVXJsLCBjb25maWcuZW50cnlQb2ludEFkZHJlc3MsIGNoYWluSWQpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgRVJDNDMzN0V0aGVyc1Byb3ZpZGVyXzEuRVJDNDMzN0V0aGVyc1Byb3ZpZGVyKGNoYWluSWQsIGNvbmZpZywgb3JpZ2luYWxTaWduZXIsIG9yaWdpbmFsUHJvdmlkZXIsIGh0dHBScGNDbGllbnQsIGVudHJ5UG9pbnQsIHNtYXJ0QWNjb3VudEFQSSkuaW5pdCgpO1xufVxuZXhwb3J0cy53cmFwUHJvdmlkZXIgPSB3cmFwUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/Provider.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/SimpleAccountAPI.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/SimpleAccountAPI.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleAccountAPI = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst contracts_1 = __webpack_require__(/*! @account-abstraction/contracts */ \"./node_modules/@account-abstraction/contracts/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst BaseAccountAPI_1 = __webpack_require__(/*! ./BaseAccountAPI */ \"./node_modules/@account-abstraction/sdk/dist/src/BaseAccountAPI.js\");\n/**\n * An implementation of the BaseAccountAPI using the SimpleAccount contract.\n * - contract deployer gets \"entrypoint\", \"owner\" addresses and \"index\" nonce\n * - owner signs requests using normal \"Ethereum Signed Message\" (ether's signer.signMessage())\n * - nonce method is \"nonce()\"\n * - execute method is \"execFromEntryPoint()\"\n */\nclass SimpleAccountAPI extends BaseAccountAPI_1.BaseAccountAPI {\n    constructor(params) {\n        var _a;\n        super(params);\n        this.factoryAddress = params.factoryAddress;\n        this.owner = params.owner;\n        this.index = (_a = params.index) !== null && _a !== void 0 ? _a : 0;\n    }\n    async _getAccountContract() {\n        if (this.accountContract == null) {\n            this.accountContract = contracts_1.SimpleAccount__factory.connect(await this.getAccountAddress(), this.provider);\n        }\n        return this.accountContract;\n    }\n    /**\n     * return the value to put into the \"initCode\" field, if the account is not yet deployed.\n     * this value holds the \"factory\" address, followed by this account's information\n     */\n    async getAccountInitCode() {\n        if (this.factory == null) {\n            if (this.factoryAddress != null && this.factoryAddress !== '') {\n                this.factory = contracts_1.SimpleAccountFactory__factory.connect(this.factoryAddress, this.provider);\n            }\n            else {\n                throw new Error('no factory to get initCode');\n            }\n        }\n        return (0, utils_1.hexConcat)([\n            this.factory.address,\n            this.factory.interface.encodeFunctionData('createAccount', [await this.owner.getAddress(), this.index])\n        ]);\n    }\n    async getNonce() {\n        if (await this.checkAccountPhantom()) {\n            return ethers_1.BigNumber.from(0);\n        }\n        const accountContract = await this._getAccountContract();\n        return await accountContract.nonce();\n    }\n    /**\n     * encode a method call from entryPoint to our contract\n     * @param target\n     * @param value\n     * @param data\n     */\n    async encodeExecute(target, value, data) {\n        const accountContract = await this._getAccountContract();\n        return accountContract.interface.encodeFunctionData('execute', [\n            target,\n            value,\n            data\n        ]);\n    }\n    async signUserOpHash(userOpHash) {\n        return await this.owner.signMessage((0, utils_1.arrayify)(userOpHash));\n    }\n}\nexports.SimpleAccountAPI = SimpleAccountAPI;\n//# sourceMappingURL=SimpleAccountAPI.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL1NpbXBsZUFjY291bnRBUEkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGlCQUFpQixtQkFBTyxDQUFDLHNEQUFRO0FBQ2pDLG9CQUFvQixtQkFBTyxDQUFDLG1HQUFnQztBQUM1RCxnQkFBZ0IsbUJBQU8sQ0FBQyw0REFBa0I7QUFDMUMseUJBQXlCLG1CQUFPLENBQUMsNEZBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYWNjb3VudC1hYnN0cmFjdGlvbi9zZGsvZGlzdC9zcmMvU2ltcGxlQWNjb3VudEFQSS5qcz9kYWRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaW1wbGVBY2NvdW50QVBJID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuY29uc3QgY29udHJhY3RzXzEgPSByZXF1aXJlKFwiQGFjY291bnQtYWJzdHJhY3Rpb24vY29udHJhY3RzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJldGhlcnMvbGliL3V0aWxzXCIpO1xuY29uc3QgQmFzZUFjY291bnRBUElfMSA9IHJlcXVpcmUoXCIuL0Jhc2VBY2NvdW50QVBJXCIpO1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgQmFzZUFjY291bnRBUEkgdXNpbmcgdGhlIFNpbXBsZUFjY291bnQgY29udHJhY3QuXG4gKiAtIGNvbnRyYWN0IGRlcGxveWVyIGdldHMgXCJlbnRyeXBvaW50XCIsIFwib3duZXJcIiBhZGRyZXNzZXMgYW5kIFwiaW5kZXhcIiBub25jZVxuICogLSBvd25lciBzaWducyByZXF1ZXN0cyB1c2luZyBub3JtYWwgXCJFdGhlcmV1bSBTaWduZWQgTWVzc2FnZVwiIChldGhlcidzIHNpZ25lci5zaWduTWVzc2FnZSgpKVxuICogLSBub25jZSBtZXRob2QgaXMgXCJub25jZSgpXCJcbiAqIC0gZXhlY3V0ZSBtZXRob2QgaXMgXCJleGVjRnJvbUVudHJ5UG9pbnQoKVwiXG4gKi9cbmNsYXNzIFNpbXBsZUFjY291bnRBUEkgZXh0ZW5kcyBCYXNlQWNjb3VudEFQSV8xLkJhc2VBY2NvdW50QVBJIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcihwYXJhbXMpO1xuICAgICAgICB0aGlzLmZhY3RvcnlBZGRyZXNzID0gcGFyYW1zLmZhY3RvcnlBZGRyZXNzO1xuICAgICAgICB0aGlzLm93bmVyID0gcGFyYW1zLm93bmVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gKF9hID0gcGFyYW1zLmluZGV4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xuICAgIH1cbiAgICBhc3luYyBfZ2V0QWNjb3VudENvbnRyYWN0KCkge1xuICAgICAgICBpZiAodGhpcy5hY2NvdW50Q29udHJhY3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hY2NvdW50Q29udHJhY3QgPSBjb250cmFjdHNfMS5TaW1wbGVBY2NvdW50X19mYWN0b3J5LmNvbm5lY3QoYXdhaXQgdGhpcy5nZXRBY2NvdW50QWRkcmVzcygpLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hY2NvdW50Q29udHJhY3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgdmFsdWUgdG8gcHV0IGludG8gdGhlIFwiaW5pdENvZGVcIiBmaWVsZCwgaWYgdGhlIGFjY291bnQgaXMgbm90IHlldCBkZXBsb3llZC5cbiAgICAgKiB0aGlzIHZhbHVlIGhvbGRzIHRoZSBcImZhY3RvcnlcIiBhZGRyZXNzLCBmb2xsb3dlZCBieSB0aGlzIGFjY291bnQncyBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIGFzeW5jIGdldEFjY291bnRJbml0Q29kZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmFjdG9yeSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mYWN0b3J5QWRkcmVzcyAhPSBudWxsICYmIHRoaXMuZmFjdG9yeUFkZHJlc3MgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWN0b3J5ID0gY29udHJhY3RzXzEuU2ltcGxlQWNjb3VudEZhY3RvcnlfX2ZhY3RvcnkuY29ubmVjdCh0aGlzLmZhY3RvcnlBZGRyZXNzLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gZmFjdG9yeSB0byBnZXQgaW5pdENvZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuaGV4Q29uY2F0KShbXG4gICAgICAgICAgICB0aGlzLmZhY3RvcnkuYWRkcmVzcyxcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKCdjcmVhdGVBY2NvdW50JywgW2F3YWl0IHRoaXMub3duZXIuZ2V0QWRkcmVzcygpLCB0aGlzLmluZGV4XSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFzeW5jIGdldE5vbmNlKCkge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5jaGVja0FjY291bnRQaGFudG9tKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBldGhlcnNfMS5CaWdOdW1iZXIuZnJvbSgwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2NvdW50Q29udHJhY3QgPSBhd2FpdCB0aGlzLl9nZXRBY2NvdW50Q29udHJhY3QoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGFjY291bnRDb250cmFjdC5ub25jZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBlbmNvZGUgYSBtZXRob2QgY2FsbCBmcm9tIGVudHJ5UG9pbnQgdG8gb3VyIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgYXN5bmMgZW5jb2RlRXhlY3V0ZSh0YXJnZXQsIHZhbHVlLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnRDb250cmFjdCA9IGF3YWl0IHRoaXMuX2dldEFjY291bnRDb250cmFjdCgpO1xuICAgICAgICByZXR1cm4gYWNjb3VudENvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoJ2V4ZWN1dGUnLCBbXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGRhdGFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25Vc2VyT3BIYXNoKHVzZXJPcEhhc2gpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMub3duZXIuc2lnbk1lc3NhZ2UoKDAsIHV0aWxzXzEuYXJyYXlpZnkpKHVzZXJPcEhhc2gpKTtcbiAgICB9XG59XG5leHBvcnRzLlNpbXBsZUFjY291bnRBUEkgPSBTaW1wbGVBY2NvdW50QVBJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2ltcGxlQWNjb3VudEFQSS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/SimpleAccountAPI.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/UserOperationEventListener.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/UserOperationEventListener.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserOperationEventListener = void 0;\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst debug = (0, debug_1.default)('aa.listener');\nconst DEFAULT_TRANSACTION_TIMEOUT = 10000;\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n */\nclass UserOperationEventListener {\n    constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n        var _a;\n        this.resolve = resolve;\n        this.reject = reject;\n        this.entryPoint = entryPoint;\n        this.sender = sender;\n        this.userOpHash = userOpHash;\n        this.nonce = nonce;\n        this.timeout = timeout;\n        this.resolved = false;\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.boundLisener = this.listenerCallback.bind(this);\n        setTimeout(() => {\n            this.stop();\n            this.reject(new Error('Timed out'));\n        }, (_a = this.timeout) !== null && _a !== void 0 ? _a : DEFAULT_TRANSACTION_TIMEOUT);\n    }\n    start() {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n        // listener takes time... first query directly:\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        setTimeout(async () => {\n            const res = await this.entryPoint.queryFilter(filter, 'latest');\n            if (res.length > 0) {\n                void this.listenerCallback(res[0]);\n            }\n            else {\n                this.entryPoint.once(filter, this.boundLisener);\n            }\n        }, 100);\n    }\n    stop() {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.entryPoint.off('UserOperationEvent', this.boundLisener);\n    }\n    async listenerCallback(...param) {\n        var _a;\n        const event = arguments[arguments.length - 1];\n        if (event.args == null) {\n            console.error('got event without args', event);\n            return;\n        }\n        // TODO: can this happen? we register to event by userOpHash..\n        if (event.args.userOpHash !== this.userOpHash) {\n            console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((_a = this.nonce) === null || _a === void 0 ? void 0 : _a.toString())}`);\n            return;\n        }\n        const transactionReceipt = await event.getTransactionReceipt();\n        transactionReceipt.transactionHash = this.userOpHash;\n        debug('got event with status=', event.args.success, 'gasUsed=', transactionReceipt.gasUsed);\n        // before returning the receipt, update the status from the event.\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (!event.args.success) {\n            await this.extractFailureReason(transactionReceipt);\n        }\n        this.stop();\n        this.resolve(transactionReceipt);\n        this.resolved = true;\n    }\n    async extractFailureReason(receipt) {\n        debug('mark tx as failed');\n        receipt.status = 0;\n        const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n        if (revertReasonEvents[0] != null) {\n            let message = revertReasonEvents[0].args.revertReason;\n            if (message.startsWith('0x08c379a0')) {\n                // Error(string)\n                message = utils_1.defaultAbiCoder.decode(['string'], '0x' + message.substring(10)).toString();\n            }\n            debug(`rejecting with reason: ${message}`);\n            this.reject(new Error(`UserOp failed with reason: ${message}`));\n        }\n    }\n}\nexports.UserOperationEventListener = UserOperationEventListener;\n//# sourceMappingURL=UserOperationEventListener.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL1VzZXJPcGVyYXRpb25FdmVudExpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDREQUFrQjtBQUMxQyxnQ0FBZ0MsbUJBQU8sQ0FBQyxrREFBTztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usa0JBQWtCLEdBQUcsNEJBQTRCLFlBQVksWUFBWSxHQUFHLCtFQUErRTtBQUMxTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRCxnRUFBZ0UsUUFBUTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3Nkay9kaXN0L3NyYy9Vc2VyT3BlcmF0aW9uRXZlbnRMaXN0ZW5lci5qcz8yMGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Vc2VyT3BlcmF0aW9uRXZlbnRMaXN0ZW5lciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiZXRoZXJzL2xpYi91dGlsc1wiKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ2FhLmxpc3RlbmVyJyk7XG5jb25zdCBERUZBVUxUX1RSQU5TQUNUSU9OX1RJTUVPVVQgPSAxMDAwMDtcbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgRXRoZXJzLmpzIGxpc3RlbmVyIGZ1bmN0aW9uIGFuZCBuZWNlc3NhcnkgVXNlck9wZXJhdGlvbiBkZXRhaWxzIHRvXG4gKiBkaXNjb3ZlciBhIFRyYW5zYWN0aW9uUmVjZWlwdCBmb3IgdGhlIG9wZXJhdGlvbi5cbiAqL1xuY2xhc3MgVXNlck9wZXJhdGlvbkV2ZW50TGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlc29sdmUsIHJlamVjdCwgZW50cnlQb2ludCwgc2VuZGVyLCB1c2VyT3BIYXNoLCBub25jZSwgdGltZW91dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB0aGlzLmVudHJ5UG9pbnQgPSBlbnRyeVBvaW50O1xuICAgICAgICB0aGlzLnNlbmRlciA9IHNlbmRlcjtcbiAgICAgICAgdGhpcy51c2VyT3BIYXNoID0gdXNlck9wSGFzaDtcbiAgICAgICAgdGhpcy5ub25jZSA9IG5vbmNlO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICAgICAgICB0aGlzLmJvdW5kTGlzZW5lciA9IHRoaXMubGlzdGVuZXJDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QobmV3IEVycm9yKCdUaW1lZCBvdXQnKSk7XG4gICAgICAgIH0sIChfYSA9IHRoaXMudGltZW91dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9UUkFOU0FDVElPTl9USU1FT1VUKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSB0aGlzLmVudHJ5UG9pbnQuZmlsdGVycy5Vc2VyT3BlcmF0aW9uRXZlbnQodGhpcy51c2VyT3BIYXNoKTtcbiAgICAgICAgLy8gbGlzdGVuZXIgdGFrZXMgdGltZS4uLiBmaXJzdCBxdWVyeSBkaXJlY3RseTpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzXG4gICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5lbnRyeVBvaW50LnF1ZXJ5RmlsdGVyKGZpbHRlciwgJ2xhdGVzdCcpO1xuICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdm9pZCB0aGlzLmxpc3RlbmVyQ2FsbGJhY2socmVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50cnlQb2ludC5vbmNlKGZpbHRlciwgdGhpcy5ib3VuZExpc2VuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDApO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXNcbiAgICAgICAgdGhpcy5lbnRyeVBvaW50Lm9mZignVXNlck9wZXJhdGlvbkV2ZW50JywgdGhpcy5ib3VuZExpc2VuZXIpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0ZW5lckNhbGxiYWNrKC4uLnBhcmFtKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZXZlbnQuYXJncyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnb3QgZXZlbnQgd2l0aG91dCBhcmdzJywgZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGNhbiB0aGlzIGhhcHBlbj8gd2UgcmVnaXN0ZXIgdG8gZXZlbnQgYnkgdXNlck9wSGFzaC4uXG4gICAgICAgIGlmIChldmVudC5hcmdzLnVzZXJPcEhhc2ggIT09IHRoaXMudXNlck9wSGFzaCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYD09IGV2ZW50IHdpdGggd3JvbmcgdXNlck9wSGFzaDogc2VuZGVyL25vbmNlOiBldmVudC4ke2V2ZW50LmFyZ3Muc2VuZGVyfUAke2V2ZW50LmFyZ3Mubm9uY2UudG9TdHJpbmcoKX0hPSB1c2VyT3AuJHt0aGlzLnNlbmRlcn1AJHtwYXJzZUludCgoX2EgPSB0aGlzLm5vbmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9TdHJpbmcoKSl9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25SZWNlaXB0ID0gYXdhaXQgZXZlbnQuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KCk7XG4gICAgICAgIHRyYW5zYWN0aW9uUmVjZWlwdC50cmFuc2FjdGlvbkhhc2ggPSB0aGlzLnVzZXJPcEhhc2g7XG4gICAgICAgIGRlYnVnKCdnb3QgZXZlbnQgd2l0aCBzdGF0dXM9JywgZXZlbnQuYXJncy5zdWNjZXNzLCAnZ2FzVXNlZD0nLCB0cmFuc2FjdGlvblJlY2VpcHQuZ2FzVXNlZCk7XG4gICAgICAgIC8vIGJlZm9yZSByZXR1cm5pbmcgdGhlIHJlY2VpcHQsIHVwZGF0ZSB0aGUgc3RhdHVzIGZyb20gdGhlIGV2ZW50LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zXG4gICAgICAgIGlmICghZXZlbnQuYXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4dHJhY3RGYWlsdXJlUmVhc29uKHRyYW5zYWN0aW9uUmVjZWlwdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMucmVzb2x2ZSh0cmFuc2FjdGlvblJlY2VpcHQpO1xuICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgZXh0cmFjdEZhaWx1cmVSZWFzb24ocmVjZWlwdCkge1xuICAgICAgICBkZWJ1ZygnbWFyayB0eCBhcyBmYWlsZWQnKTtcbiAgICAgICAgcmVjZWlwdC5zdGF0dXMgPSAwO1xuICAgICAgICBjb25zdCByZXZlcnRSZWFzb25FdmVudHMgPSBhd2FpdCB0aGlzLmVudHJ5UG9pbnQucXVlcnlGaWx0ZXIodGhpcy5lbnRyeVBvaW50LmZpbHRlcnMuVXNlck9wZXJhdGlvblJldmVydFJlYXNvbih0aGlzLnVzZXJPcEhhc2gsIHRoaXMuc2VuZGVyKSwgcmVjZWlwdC5ibG9ja0hhc2gpO1xuICAgICAgICBpZiAocmV2ZXJ0UmVhc29uRXZlbnRzWzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gcmV2ZXJ0UmVhc29uRXZlbnRzWzBdLmFyZ3MucmV2ZXJ0UmVhc29uO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRzV2l0aCgnMHgwOGMzNzlhMCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gRXJyb3Ioc3RyaW5nKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB1dGlsc18xLmRlZmF1bHRBYmlDb2Rlci5kZWNvZGUoWydzdHJpbmcnXSwgJzB4JyArIG1lc3NhZ2Uuc3Vic3RyaW5nKDEwKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnKGByZWplY3Rpbmcgd2l0aCByZWFzb246ICR7bWVzc2FnZX1gKTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0KG5ldyBFcnJvcihgVXNlck9wIGZhaWxlZCB3aXRoIHJlYXNvbjogJHttZXNzYWdlfWApKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVXNlck9wZXJhdGlvbkV2ZW50TGlzdGVuZXIgPSBVc2VyT3BlcmF0aW9uRXZlbnRMaXN0ZW5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVzZXJPcGVyYXRpb25FdmVudExpc3RlbmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/UserOperationEventListener.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/calcPreVerificationGas.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/calcPreVerificationGas.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.calcPreVerificationGas = exports.DefaultGasOverheads = void 0;\nconst utils_1 = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\nconst utils_2 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nexports.DefaultGasOverheads = {\n    fixed: 21000,\n    perUserOp: 18300,\n    perUserOpWord: 4,\n    zeroByte: 4,\n    nonZeroByte: 16,\n    bundleSize: 1,\n    sigSize: 65\n};\n/**\n * calculate the preVerificationGas of the given UserOperation\n * preVerificationGas (by definition) is the cost overhead that can't be calculated on-chain.\n * it is based on parameters that are defined by the Ethereum protocol for external transactions.\n * @param userOp filled userOp to calculate. The only possible missing fields can be the signature and preVerificationGas itself\n * @param overheads gas overheads to use, to override the default values\n */\nfunction calcPreVerificationGas(userOp, overheads) {\n    const ov = Object.assign(Object.assign({}, exports.DefaultGasOverheads), (overheads !== null && overheads !== void 0 ? overheads : {}));\n    const p = Object.assign({ \n        // dummy values, in case the UserOp is incomplete.\n        preVerificationGas: 21000, signature: (0, utils_2.hexlify)(Buffer.alloc(ov.sigSize, 1)) }, userOp);\n    const packed = (0, utils_2.arrayify)((0, utils_1.packUserOp)(p, false));\n    const lengthInWord = (packed.length + 31) / 32;\n    const callDataCost = packed.map(x => x === 0 ? ov.zeroByte : ov.nonZeroByte).reduce((sum, x) => sum + x);\n    const ret = Math.round(callDataCost +\n        ov.fixed / ov.bundleSize +\n        ov.perUserOp +\n        ov.perUserOpWord * lengthInWord);\n    return ret;\n}\nexports.calcPreVerificationGas = calcPreVerificationGas;\n//# sourceMappingURL=calcPreVerificationGas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL2NhbGNQcmVWZXJpZmljYXRpb25HYXMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QixHQUFHLDJCQUEyQjtBQUM1RCxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBNEI7QUFDcEQsZ0JBQWdCLG1CQUFPLENBQUMsNERBQWtCO0FBQzFDLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyw0RkFBNEY7QUFDekk7QUFDQTtBQUNBLG1FQUFtRSxNQUFNLHdCQUF3QjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3Nkay9kaXN0L3NyYy9jYWxjUHJlVmVyaWZpY2F0aW9uR2FzLmpzP2MyOTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbGNQcmVWZXJpZmljYXRpb25HYXMgPSBleHBvcnRzLkRlZmF1bHRHYXNPdmVyaGVhZHMgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBhY2NvdW50LWFic3RyYWN0aW9uL3V0aWxzXCIpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCJldGhlcnMvbGliL3V0aWxzXCIpO1xuZXhwb3J0cy5EZWZhdWx0R2FzT3ZlcmhlYWRzID0ge1xuICAgIGZpeGVkOiAyMTAwMCxcbiAgICBwZXJVc2VyT3A6IDE4MzAwLFxuICAgIHBlclVzZXJPcFdvcmQ6IDQsXG4gICAgemVyb0J5dGU6IDQsXG4gICAgbm9uWmVyb0J5dGU6IDE2LFxuICAgIGJ1bmRsZVNpemU6IDEsXG4gICAgc2lnU2l6ZTogNjVcbn07XG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgcHJlVmVyaWZpY2F0aW9uR2FzIG9mIHRoZSBnaXZlbiBVc2VyT3BlcmF0aW9uXG4gKiBwcmVWZXJpZmljYXRpb25HYXMgKGJ5IGRlZmluaXRpb24pIGlzIHRoZSBjb3N0IG92ZXJoZWFkIHRoYXQgY2FuJ3QgYmUgY2FsY3VsYXRlZCBvbi1jaGFpbi5cbiAqIGl0IGlzIGJhc2VkIG9uIHBhcmFtZXRlcnMgdGhhdCBhcmUgZGVmaW5lZCBieSB0aGUgRXRoZXJldW0gcHJvdG9jb2wgZm9yIGV4dGVybmFsIHRyYW5zYWN0aW9ucy5cbiAqIEBwYXJhbSB1c2VyT3AgZmlsbGVkIHVzZXJPcCB0byBjYWxjdWxhdGUuIFRoZSBvbmx5IHBvc3NpYmxlIG1pc3NpbmcgZmllbGRzIGNhbiBiZSB0aGUgc2lnbmF0dXJlIGFuZCBwcmVWZXJpZmljYXRpb25HYXMgaXRzZWxmXG4gKiBAcGFyYW0gb3ZlcmhlYWRzIGdhcyBvdmVyaGVhZHMgdG8gdXNlLCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gY2FsY1ByZVZlcmlmaWNhdGlvbkdhcyh1c2VyT3AsIG92ZXJoZWFkcykge1xuICAgIGNvbnN0IG92ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleHBvcnRzLkRlZmF1bHRHYXNPdmVyaGVhZHMpLCAob3ZlcmhlYWRzICE9PSBudWxsICYmIG92ZXJoZWFkcyAhPT0gdm9pZCAwID8gb3ZlcmhlYWRzIDoge30pKTtcbiAgICBjb25zdCBwID0gT2JqZWN0LmFzc2lnbih7IFxuICAgICAgICAvLyBkdW1teSB2YWx1ZXMsIGluIGNhc2UgdGhlIFVzZXJPcCBpcyBpbmNvbXBsZXRlLlxuICAgICAgICBwcmVWZXJpZmljYXRpb25HYXM6IDIxMDAwLCBzaWduYXR1cmU6ICgwLCB1dGlsc18yLmhleGxpZnkpKEJ1ZmZlci5hbGxvYyhvdi5zaWdTaXplLCAxKSkgfSwgdXNlck9wKTtcbiAgICBjb25zdCBwYWNrZWQgPSAoMCwgdXRpbHNfMi5hcnJheWlmeSkoKDAsIHV0aWxzXzEucGFja1VzZXJPcCkocCwgZmFsc2UpKTtcbiAgICBjb25zdCBsZW5ndGhJbldvcmQgPSAocGFja2VkLmxlbmd0aCArIDMxKSAvIDMyO1xuICAgIGNvbnN0IGNhbGxEYXRhQ29zdCA9IHBhY2tlZC5tYXAoeCA9PiB4ID09PSAwID8gb3YuemVyb0J5dGUgOiBvdi5ub25aZXJvQnl0ZSkucmVkdWNlKChzdW0sIHgpID0+IHN1bSArIHgpO1xuICAgIGNvbnN0IHJldCA9IE1hdGgucm91bmQoY2FsbERhdGFDb3N0ICtcbiAgICAgICAgb3YuZml4ZWQgLyBvdi5idW5kbGVTaXplICtcbiAgICAgICAgb3YucGVyVXNlck9wICtcbiAgICAgICAgb3YucGVyVXNlck9wV29yZCAqIGxlbmd0aEluV29yZCk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMuY2FsY1ByZVZlcmlmaWNhdGlvbkdhcyA9IGNhbGNQcmVWZXJpZmljYXRpb25HYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxjUHJlVmVyaWZpY2F0aW9uR2FzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/calcPreVerificationGas.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/sdk/dist/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@account-abstraction/sdk/dist/src/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeterministicDeployer = exports.HttpRpcClient = exports.ERC4337EthersProvider = exports.ERC4337EthersSigner = exports.wrapProvider = exports.PaymasterAPI = exports.SimpleAccountAPI = void 0;\nvar SimpleAccountAPI_1 = __webpack_require__(/*! ./SimpleAccountAPI */ \"./node_modules/@account-abstraction/sdk/dist/src/SimpleAccountAPI.js\");\nObject.defineProperty(exports, \"SimpleAccountAPI\", ({ enumerable: true, get: function () { return SimpleAccountAPI_1.SimpleAccountAPI; } }));\nvar PaymasterAPI_1 = __webpack_require__(/*! ./PaymasterAPI */ \"./node_modules/@account-abstraction/sdk/dist/src/PaymasterAPI.js\");\nObject.defineProperty(exports, \"PaymasterAPI\", ({ enumerable: true, get: function () { return PaymasterAPI_1.PaymasterAPI; } }));\nvar Provider_1 = __webpack_require__(/*! ./Provider */ \"./node_modules/@account-abstraction/sdk/dist/src/Provider.js\");\nObject.defineProperty(exports, \"wrapProvider\", ({ enumerable: true, get: function () { return Provider_1.wrapProvider; } }));\nvar ERC4337EthersSigner_1 = __webpack_require__(/*! ./ERC4337EthersSigner */ \"./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersSigner.js\");\nObject.defineProperty(exports, \"ERC4337EthersSigner\", ({ enumerable: true, get: function () { return ERC4337EthersSigner_1.ERC4337EthersSigner; } }));\nvar ERC4337EthersProvider_1 = __webpack_require__(/*! ./ERC4337EthersProvider */ \"./node_modules/@account-abstraction/sdk/dist/src/ERC4337EthersProvider.js\");\nObject.defineProperty(exports, \"ERC4337EthersProvider\", ({ enumerable: true, get: function () { return ERC4337EthersProvider_1.ERC4337EthersProvider; } }));\nvar HttpRpcClient_1 = __webpack_require__(/*! ./HttpRpcClient */ \"./node_modules/@account-abstraction/sdk/dist/src/HttpRpcClient.js\");\nObject.defineProperty(exports, \"HttpRpcClient\", ({ enumerable: true, get: function () { return HttpRpcClient_1.HttpRpcClient; } }));\nvar DeterministicDeployer_1 = __webpack_require__(/*! ./DeterministicDeployer */ \"./node_modules/@account-abstraction/sdk/dist/src/DeterministicDeployer.js\");\nObject.defineProperty(exports, \"DeterministicDeployer\", ({ enumerable: true, get: function () { return DeterministicDeployer_1.DeterministicDeployer; } }));\n__exportStar(__webpack_require__(/*! ./calcPreVerificationGas */ \"./node_modules/@account-abstraction/sdk/dist/src/calcPreVerificationGas.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLHFCQUFxQixHQUFHLDZCQUE2QixHQUFHLDJCQUEyQixHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLHdCQUF3QjtBQUM1TCx5QkFBeUIsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDckQsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLHFCQUFxQixtQkFBTyxDQUFDLHdGQUFnQjtBQUM3QyxnREFBK0MsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDOUgsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQVk7QUFDckMsZ0RBQStDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQzFILDRCQUE0QixtQkFBTyxDQUFDLHNHQUF1QjtBQUMzRCx1REFBc0QsRUFBRSxxQ0FBcUMscURBQXFELEVBQUM7QUFDbkosOEJBQThCLG1CQUFPLENBQUMsMEdBQXlCO0FBQy9ELHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6SixzQkFBc0IsbUJBQU8sQ0FBQywwRkFBaUI7QUFDL0MsaURBQWdELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ2pJLDhCQUE4QixtQkFBTyxDQUFDLDBHQUF5QjtBQUMvRCx5REFBd0QsRUFBRSxxQ0FBcUMseURBQXlELEVBQUM7QUFDekosYUFBYSxtQkFBTyxDQUFDLDRHQUEwQjtBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrL2Rpc3Qvc3JjL2luZGV4LmpzPzVlMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGV0ZXJtaW5pc3RpY0RlcGxveWVyID0gZXhwb3J0cy5IdHRwUnBjQ2xpZW50ID0gZXhwb3J0cy5FUkM0MzM3RXRoZXJzUHJvdmlkZXIgPSBleHBvcnRzLkVSQzQzMzdFdGhlcnNTaWduZXIgPSBleHBvcnRzLndyYXBQcm92aWRlciA9IGV4cG9ydHMuUGF5bWFzdGVyQVBJID0gZXhwb3J0cy5TaW1wbGVBY2NvdW50QVBJID0gdm9pZCAwO1xudmFyIFNpbXBsZUFjY291bnRBUElfMSA9IHJlcXVpcmUoXCIuL1NpbXBsZUFjY291bnRBUElcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaW1wbGVBY2NvdW50QVBJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTaW1wbGVBY2NvdW50QVBJXzEuU2ltcGxlQWNjb3VudEFQSTsgfSB9KTtcbnZhciBQYXltYXN0ZXJBUElfMSA9IHJlcXVpcmUoXCIuL1BheW1hc3RlckFQSVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBheW1hc3RlckFQSVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUGF5bWFzdGVyQVBJXzEuUGF5bWFzdGVyQVBJOyB9IH0pO1xudmFyIFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9Qcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndyYXBQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvdmlkZXJfMS53cmFwUHJvdmlkZXI7IH0gfSk7XG52YXIgRVJDNDMzN0V0aGVyc1NpZ25lcl8xID0gcmVxdWlyZShcIi4vRVJDNDMzN0V0aGVyc1NpZ25lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVSQzQzMzdFdGhlcnNTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVSQzQzMzdFdGhlcnNTaWduZXJfMS5FUkM0MzM3RXRoZXJzU2lnbmVyOyB9IH0pO1xudmFyIEVSQzQzMzdFdGhlcnNQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vRVJDNDMzN0V0aGVyc1Byb3ZpZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRVJDNDMzN0V0aGVyc1Byb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFUkM0MzM3RXRoZXJzUHJvdmlkZXJfMS5FUkM0MzM3RXRoZXJzUHJvdmlkZXI7IH0gfSk7XG52YXIgSHR0cFJwY0NsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cFJwY0NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkh0dHBScGNDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEh0dHBScGNDbGllbnRfMS5IdHRwUnBjQ2xpZW50OyB9IH0pO1xudmFyIERldGVybWluaXN0aWNEZXBsb3llcl8xID0gcmVxdWlyZShcIi4vRGV0ZXJtaW5pc3RpY0RlcGxveWVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGV0ZXJtaW5pc3RpY0RlcGxveWVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBEZXRlcm1pbmlzdGljRGVwbG95ZXJfMS5EZXRlcm1pbmlzdGljRGVwbG95ZXI7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2FsY1ByZVZlcmlmaWNhdGlvbkdhc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/sdk/dist/src/index.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/utils/dist/src/ERC4337Utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@account-abstraction/utils/dist/src/ERC4337Utils.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveHexlify = exports.deepHexlify = exports.rethrowError = exports.decodeErrorReason = exports.getUserOpHash = exports.packUserOp = exports.AddressZero = void 0;\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"./node_modules/ethers/lib/utils.js\");\nconst IEntryPoint_json_1 = __webpack_require__(/*! @account-abstraction/contracts/artifacts/IEntryPoint.json */ \"./node_modules/@account-abstraction/contracts/artifacts/IEntryPoint.json\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst debug = (0, debug_1.default)('aa.utils');\n// UserOperation is the first parameter of validateUseOp\nconst validateUserOpMethod = 'simulateValidation';\nconst UserOpType = (_a = IEntryPoint_json_1.abi.find(entry => entry.name === validateUserOpMethod)) === null || _a === void 0 ? void 0 : _a.inputs[0];\nif (UserOpType == null) {\n    throw new Error(`unable to find method ${validateUserOpMethod} in EP ${IEntryPoint_json_1.abi.filter(x => x.type === 'function').map(x => x.name).join(',')}`);\n}\nexports.AddressZero = ethers_1.ethers.constants.AddressZero;\nfunction encode(typevalues, forSignature) {\n    const types = typevalues.map(typevalue => typevalue.type === 'bytes' && forSignature ? 'bytes32' : typevalue.type);\n    const values = typevalues.map((typevalue) => typevalue.type === 'bytes' && forSignature ? (0, utils_1.keccak256)(typevalue.val) : typevalue.val);\n    return utils_1.defaultAbiCoder.encode(types, values);\n}\n/**\n * pack the userOperation\n * @param op\n * @param forSignature \"true\" if the hash is needed to calculate the getUserOpHash()\n *  \"false\" to pack entire UserOp, for calculating the calldata cost of putting it on-chain.\n */\nfunction packUserOp(op, forSignature = true) {\n    if (forSignature) {\n        // lighter signature scheme (must match UserOperation#pack): do encode a zero-length signature, but strip afterwards the appended zero-length value\n        const userOpType = {\n            components: [\n                {\n                    type: 'address',\n                    name: 'sender'\n                },\n                {\n                    type: 'uint256',\n                    name: 'nonce'\n                },\n                {\n                    type: 'bytes',\n                    name: 'initCode'\n                },\n                {\n                    type: 'bytes',\n                    name: 'callData'\n                },\n                {\n                    type: 'uint256',\n                    name: 'callGasLimit'\n                },\n                {\n                    type: 'uint256',\n                    name: 'verificationGasLimit'\n                },\n                {\n                    type: 'uint256',\n                    name: 'preVerificationGas'\n                },\n                {\n                    type: 'uint256',\n                    name: 'maxFeePerGas'\n                },\n                {\n                    type: 'uint256',\n                    name: 'maxPriorityFeePerGas'\n                },\n                {\n                    type: 'bytes',\n                    name: 'paymasterAndData'\n                },\n                {\n                    type: 'bytes',\n                    name: 'signature'\n                }\n            ],\n            name: 'userOp',\n            type: 'tuple'\n        };\n        // console.log('hard-coded userOpType', userOpType)\n        // console.log('from ABI userOpType', UserOpType)\n        let encoded = utils_1.defaultAbiCoder.encode([userOpType], [Object.assign(Object.assign({}, op), { signature: '0x' })]);\n        // remove leading word (total length) and trailing word (zero-length signature)\n        encoded = '0x' + encoded.slice(66, encoded.length - 64);\n        return encoded;\n    }\n    const typevalues = UserOpType.components.map((c) => ({\n        type: c.type,\n        val: op[c.name]\n    }));\n    return encode(typevalues, forSignature);\n}\nexports.packUserOp = packUserOp;\n/**\n * calculate the userOpHash of a given userOperation.\n * The userOpHash is a hash of all UserOperation fields, except the \"signature\" field.\n * The entryPoint uses this value in the emitted UserOperationEvent.\n * A wallet may use this value as the hash to sign (the SampleWallet uses this method)\n * @param op\n * @param entryPoint\n * @param chainId\n */\nfunction getUserOpHash(op, entryPoint, chainId) {\n    const userOpHash = (0, utils_1.keccak256)(packUserOp(op, true));\n    const enc = utils_1.defaultAbiCoder.encode(['bytes32', 'address', 'uint256'], [userOpHash, entryPoint, chainId]);\n    return (0, utils_1.keccak256)(enc);\n}\nexports.getUserOpHash = getUserOpHash;\nconst ErrorSig = (0, utils_1.keccak256)(Buffer.from('Error(string)')).slice(0, 10); // 0x08c379a0\nconst FailedOpSig = (0, utils_1.keccak256)(Buffer.from('FailedOp(uint256,string)')).slice(0, 10); // 0x220266b6\n/**\n * decode bytes thrown by revert as Error(message) or FailedOp(opIndex,paymaster,message)\n */\nfunction decodeErrorReason(error) {\n    debug('decoding', error);\n    if (error.startsWith(ErrorSig)) {\n        const [message] = utils_1.defaultAbiCoder.decode(['string'], '0x' + error.substring(10));\n        return { message };\n    }\n    else if (error.startsWith(FailedOpSig)) {\n        let [opIndex, message] = utils_1.defaultAbiCoder.decode(['uint256', 'string'], '0x' + error.substring(10));\n        message = `FailedOp: ${message}`;\n        return {\n            message,\n            opIndex\n        };\n    }\n}\nexports.decodeErrorReason = decodeErrorReason;\n/**\n * update thrown Error object with our custom FailedOp message, and re-throw it.\n * updated both \"message\" and inner encoded \"data\"\n * tested on geth, hardhat-node\n * usage: entryPoint.handleOps().catch(decodeError)\n */\nfunction rethrowError(e) {\n    let error = e;\n    let parent = e;\n    if ((error === null || error === void 0 ? void 0 : error.error) != null) {\n        error = error.error;\n    }\n    while ((error === null || error === void 0 ? void 0 : error.data) != null) {\n        parent = error;\n        error = error.data;\n    }\n    const decoded = typeof error === 'string' && error.length > 2 ? decodeErrorReason(error) : undefined;\n    if (decoded != null) {\n        e.message = decoded.message;\n        if (decoded.opIndex != null) {\n            // helper for chai: convert our FailedOp error into \"Error(msg)\"\n            const errorWithMsg = (0, utils_1.hexConcat)([ErrorSig, utils_1.defaultAbiCoder.encode(['string'], [decoded.message])]);\n            // modify in-place the error object:\n            parent.data = errorWithMsg;\n        }\n    }\n    throw e;\n}\nexports.rethrowError = rethrowError;\n/**\n * hexlify all members of object, recursively\n * @param obj\n */\nfunction deepHexlify(obj) {\n    if (typeof obj === 'function') {\n        return undefined;\n    }\n    if (obj == null || typeof obj === 'string' || typeof obj === 'boolean') {\n        return obj;\n    }\n    else if (obj._isBigNumber != null || typeof obj !== 'object') {\n        return (0, utils_1.hexlify)(obj).replace(/^0x0/, '0x');\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(member => deepHexlify(member));\n    }\n    return Object.keys(obj)\n        .reduce((set, key) => (Object.assign(Object.assign({}, set), { [key]: deepHexlify(obj[key]) })), {});\n}\nexports.deepHexlify = deepHexlify;\n// resolve all property and hexlify.\n// (UserOpMethodHandler receives data from the network, so we need to pack our generated values)\nasync function resolveHexlify(a) {\n    return deepHexlify(await (0, utils_1.resolveProperties)(a));\n}\nexports.resolveHexlify = resolveHexlify;\n//# sourceMappingURL=ERC4337Utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/utils/dist/src/ERC4337Utils.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/utils/dist/src/Version.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@account-abstraction/utils/dist/src/Version.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.erc4337RuntimeVersion = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexports.erc4337RuntimeVersion = __webpack_require__(/*! ../../package.json */ \"./node_modules/@account-abstraction/utils/package.json\").version;\n//# sourceMappingURL=Version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vdXRpbHMvZGlzdC9zcmMvVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQSwrSUFBcUU7QUFDckUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3V0aWxzL2Rpc3Qvc3JjL1ZlcnNpb24uanM/OTI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXJjNDMzN1J1bnRpbWVWZXJzaW9uID0gdm9pZCAwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmV4cG9ydHMuZXJjNDMzN1J1bnRpbWVWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/utils/dist/src/Version.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/utils/dist/src/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@account-abstraction/utils/dist/src/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./Version */ \"./node_modules/@account-abstraction/utils/dist/src/Version.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ERC4337Utils */ \"./node_modules/@account-abstraction/utils/dist/src/ERC4337Utils.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFjY291bnQtYWJzdHJhY3Rpb24vdXRpbHMvZGlzdC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGdGQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQywwRkFBZ0I7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhY2NvdW50LWFic3RyYWN0aW9uL3V0aWxzL2Rpc3Qvc3JjL2luZGV4LmpzP2Y4NDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9WZXJzaW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FUkM0MzM3VXRpbHNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@account-abstraction/utils/dist/src/index.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: function() { return /* binding */ getValidPublicRPCUrl; },\n/* harmony export */   i: function() { return /* binding */ isTwUrl; }\n/* harmony export */ });\n/* harmony import */ var _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thirdweb-dev/chains */ \"./node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js\");\n\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return (0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_0__.getValidChainRPCs)(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL2Rpc3QvdXJsLWJjODhiMmI2LmJyb3dzZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsdUVBQWlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0aGlyZHdlYi1kZXYvd2FsbGV0cy9kaXN0L3VybC1iYzg4YjJiNi5icm93c2VyLmVzbS5qcz85YmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFZhbGlkQ2hhaW5SUENzIH0gZnJvbSAnQHRoaXJkd2ViLWRldi9jaGFpbnMnO1xuXG5mdW5jdGlvbiBpc1R3VXJsKHVybCkge1xuICBjb25zdCBob3N0ID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuICByZXR1cm4gaG9zdC5lbmRzV2l0aChcIi50aGlyZHdlYi5jb21cIikgfHwgaG9zdCA9PT0gXCJsb2NhbGhvc3RcIiB8fCBob3N0ID09PSBcIjAuMC4wLjBcIjtcbn1cbmZ1bmN0aW9uIGdldFZhbGlkUHVibGljUlBDVXJsKGNoYWluKSB7XG4gIHJldHVybiBnZXRWYWxpZENoYWluUlBDcyhjaGFpbikubWFwKHJwYyA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocnBjKTtcbiAgICAgIC8vIHJlbW92ZSBjbGllbnQgaWQgZnJvbSB1cmxcbiAgICAgIGlmICh1cmwuaG9zdG5hbWUuZW5kc1dpdGgoXCIudGhpcmR3ZWIuY29tXCIpKSB7XG4gICAgICAgIHVybC5wYXRobmFtZSA9IFwiXCI7XG4gICAgICAgIHVybC5zZWFyY2ggPSBcIlwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBycGM7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgZ2V0VmFsaWRQdWJsaWNSUENVcmwgYXMgZywgaXNUd1VybCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmartWalletConnector: function() { return /* binding */ SmartWalletConnector; }\n/* harmony export */ });\n/* harmony import */ var _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../dist/connector-05689d68.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/dist/connector-05689d68.browser.esm.js\");\n/* harmony import */ var _account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @account-abstraction/sdk */ \"./node_modules/@account-abstraction/sdk/dist/src/index.js\");\n/* harmony import */ var _account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _dist_url_bc88b2b6_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../dist/url-bc88b2b6.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js\");\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @account-abstraction/contracts */ \"./node_modules/@account-abstraction/contracts/dist/index.js\");\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../dist/defineProperty-c8ecdc07.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/dist/defineProperty-c8ecdc07.browser.esm.js\");\n/* harmony import */ var _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\n/* harmony import */ var _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../dist/constants-5a6f7f26.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/dist/constants-5a6f7f26.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"./node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @thirdweb-dev/chains */ \"./node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/wallets/node_modules/eventemitter3/index.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n\n\n\n\n\n\nfunction toJSON(op) {\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(op).then(userOp => Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {}));\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: ethers__WEBPACK_IMPORTED_MODULE_4__.utils.keccak256(op.initCode),\n    callDataHash: ethers__WEBPACK_IMPORTED_MODULE_4__.utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: ethers__WEBPACK_IMPORTED_MODULE_4__.utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = ethers__WEBPACK_IMPORTED_MODULE_4__.utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = ethers__WEBPACK_IMPORTED_MODULE_4__.utils.keccak256(encoded);\n  const enc = ethers__WEBPACK_IMPORTED_MODULE_4__.utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.BigNumber.from(ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst SIG_SIZE = 65;\nconst DUMMY_PAYMASTER_AND_DATA = \"0x0101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\";\nclass VerifyingPaymasterAPI extends _account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0__.PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if ((0,_dist_url_bc88b2b6_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await toJSON(userOp), {\n          entryPoint: this.entryPoint\n        }]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (res.result) {\n      const result = res.result.paymasterAndData || res.result;\n      return result.toString();\n    } else {\n      throw new Error(`Paymaster returned no result from ${this.paymasterUrl}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__._)(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = ethers__WEBPACK_IMPORTED_MODULE_4__.utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends ethers__WEBPACK_IMPORTED_MODULE_4__.Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    ethers__WEBPACK_IMPORTED_MODULE_4__.utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, batchData) {\n    const tx = await ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const userOperation = await this.smartAccountAPI.createSignedUserOp({\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, batchData);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n  async signMessage(message) {\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    return await this.originalSigner.signMessage(message);\n  }\n  async signTransaction(transaction, batchData) {\n    const tx = await ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const userOperation = await this.smartAccountAPI.createSignedUserOp({\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, batchData);\n    const userOpString = JSON.stringify((0,_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.deepHexlify)(await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOperation)));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends ethers__WEBPACK_IMPORTED_MODULE_4__.providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // hijack this to estimate gas from the entrypoint instead\n      const {\n        callGasLimit\n      } = await this.smartAccountAPI.encodeUserOpCallDataAndGasLimit({\n        target: params.transaction.to,\n        data: params.transaction.data,\n        value: params.transaction.value,\n        gasLimit: params.transaction.gasLimit\n      });\n      return callGasLimit;\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0),\n      data: ethers__WEBPACK_IMPORTED_MODULE_4__.utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitForUserOp();\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\nvar pkg = {\n\tname: \"@thirdweb-dev/wallets\",\n\tversion: \"2.3.0\",\n\tmain: \"dist/thirdweb-dev-wallets.cjs.js\",\n\tmodule: \"dist/thirdweb-dev-wallets.esm.js\",\n\tbrowser: {\n\t\t\"./dist/thirdweb-dev-wallets.esm.js\": \"./dist/thirdweb-dev-wallets.browser.esm.js\"\n\t},\n\texports: {\n\t\t\".\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./dist/thirdweb-dev-wallets.browser.esm.js\",\n\t\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.cjs.js\"\n\t\t},\n\t\t\"./evm\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/base\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/async\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/rabby\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/coin98\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/engine\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/ethers\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/onekey\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/gcp-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/abstract\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/core-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/private-key\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/paper-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/paper\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/rabby\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/rainbow-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/coin98\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/onekey\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/rainbow\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet-node\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/crypto-defi-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-secrets-manager\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/core-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/crypto-defi-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet/implementations\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js\"\n\t\t},\n\t\t\"./package.json\": \"./package.json\"\n\t},\n\ttypes: \"dist/thirdweb-dev-wallets.cjs.d.ts\",\n\trepository: \"https://github.com/thirdweb-dev/js/tree/main/packages/wallets\",\n\tlicense: \"Apache-2.0\",\n\tbugs: {\n\t\turl: \"https://github.com/thirdweb-dev/js/issues\"\n\t},\n\tauthor: \"thirdweb eng <eng@thirdweb.com>\",\n\tfiles: [\n\t\t\"dist/\",\n\t\t\"evm/\"\n\t],\n\tpreconstruct: {\n\t\tentrypoints: [\n\t\t\t\"index.ts\",\n\t\t\t\"evm/index.ts\",\n\t\t\t\"evm/connectors/*/index.ts\",\n\t\t\t\"evm/connectors/embedded-wallet/implementations/index.ts\",\n\t\t\t\"evm/wallets/**\"\n\t\t],\n\t\texports: {\n\t\t\tenvConditions: [\n\t\t\t\t\"browser\"\n\t\t\t]\n\t\t}\n\t},\n\tsideEffects: false,\n\tdependencies: {\n\t\t\"@account-abstraction/contracts\": \"^0.5.0\",\n\t\t\"@account-abstraction/sdk\": \"^0.5.0\",\n\t\t\"@account-abstraction/utils\": \"^0.5.0\",\n\t\t\"@blocto/sdk\": \"^0.5.4\",\n\t\t\"@coinbase/wallet-sdk\": \"^3.7.1\",\n\t\t\"@google-cloud/kms\": \"3.0.1\",\n\t\t\"@magic-ext/connect\": \"^6.7.2\",\n\t\t\"@magic-ext/oauth\": \"^7.6.2\",\n\t\t\"@magic-sdk/provider\": \"^13.6.2\",\n\t\t\"@metamask/eth-sig-util\": \"^4.0.0\",\n\t\t\"@paperxyz/embedded-wallet-service-sdk\": \"^1.2.5\",\n\t\t\"@paperxyz/sdk-common-utilities\": \"^0.1.0\",\n\t\t\"@safe-global/safe-core-sdk\": \"^3.3.4\",\n\t\t\"@safe-global/safe-ethers-adapters\": \"0.1.0-alpha.17\",\n\t\t\"@safe-global/safe-ethers-lib\": \"^1.9.4\",\n\t\t\"@thirdweb-dev/chains\": \"workspace:*\",\n\t\t\"@thirdweb-dev/crypto\": \"workspace:*\",\n\t\t\"@thirdweb-dev/contracts-js\": \"workspace:*\",\n\t\t\"@thirdweb-dev/sdk\": \"workspace:*\",\n\t\t\"@walletconnect/core\": \"^2.9.1\",\n\t\t\"@walletconnect/ethereum-provider\": \"^2.9.1\",\n\t\t\"@walletconnect/jsonrpc-utils\": \"^1.0.8\",\n\t\t\"@walletconnect/modal\": \"^2.6.1\",\n\t\t\"@walletconnect/types\": \"^2.9.1\",\n\t\t\"@walletconnect/utils\": \"^2.10.2\",\n\t\t\"@walletconnect/web3wallet\": \"^1.8.7\",\n\t\t\"asn1.js\": \"5.4.1\",\n\t\t\"bn.js\": \"5.2.0\",\n\t\tbuffer: \"^6.0.3\",\n\t\t\"eth-provider\": \"^0.13.6\",\n\t\t\"ethereumjs-util\": \"^7.1.3\",\n\t\teventemitter3: \"^5.0.1\",\n\t\t\"key-encoder\": \"2.0.3\",\n\t\t\"magic-sdk\": \"^13.6.2\",\n\t\t\"web3-core\": \"1.5.2\"\n\t},\n\tpeerDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.256.0\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\tbs58: \"^5.0.0\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\ttweetnacl: \"^1.0.3\"\n\t},\n\tpeerDependenciesMeta: {\n\t\ttweetnacl: {\n\t\t\toptional: true\n\t\t},\n\t\t\"@aws-sdk/client-secrets-manager\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"ethers-aws-kms-signer\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@noble/ed25519\": {\n\t\t\toptional: true\n\t\t},\n\t\tbs58: {\n\t\t\toptional: true\n\t\t},\n\t\tethers: {\n\t\t\toptional: true\n\t\t}\n\t},\n\tdevDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n\t\t\"@babel/plugin-proposal-class-properties\": \"7.18.6\",\n\t\t\"@babel/plugin-transform-flow-strip-types\": \"^7.22.5\",\n\t\t\"@babel/plugin-transform-private-methods\": \"7.22.5\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\t\"@preconstruct/cli\": \"2.7.0\",\n\t\t\"@thirdweb-dev/tsconfig\": \"workspace:*\",\n\t\t\"@types/bn.js\": \"^5.1.1\",\n\t\tabitype: \"^0.2.5\",\n\t\t\"babel-plugin-transform-inline-environment-variables\": \"^0.4.4\",\n\t\tbs58: \"^5.0.0\",\n\t\t\"cross-env\": \"^7.0.3\",\n\t\t\"eslint-config-thirdweb\": \"workspace:*\",\n\t\t\"eslint-plugin-better-tree-shaking\": \"0.0.4\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.2.16\",\n\t\t\"ethereum-provider\": \"^0.7.7\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\trimraf: \"^3.0.2\",\n\t\ttweetnacl: \"^1.0.3\",\n\t\ttypescript: \"^5.1.6\",\n\t\t\"typedoc-gen\": \"workspace:*\"\n\t},\n\tscripts: {\n\t\tformat: \"prettier --write 'src/**/*'\",\n\t\tlint: \"eslint src/ && bunx publint --strict --level warning\",\n\t\tfix: \"eslint src/ --fix\",\n\t\tclean: \"rm -rf dist/\",\n\t\tbuild: \"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build\",\n\t\t\"preconstruct:fix\": \"preconstruct fix\",\n\t\tpush: \"yalc push\",\n\t\ttypedoc: \"node scripts/typedoc.mjs\"\n\t},\n\tengines: {\n\t\tnode: \">=18\"\n\t}\n};\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if ((0,_dist_url_bc88b2b6_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : window.bridge !== undefined ? \"webGL\" : \"browser\" ;\n    }\n    this.userOpJsonRpcProvider = new ethers__WEBPACK_IMPORTED_MODULE_4__.providers.JsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - the UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = (0,_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.deepHexlify)(await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = (0,_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.deepHexlify)(await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - the normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_1__.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__._)(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.overheads = params.overheads;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_1__.EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - the target contract address\n   * @param value - the value to send to the target contract\n   * @param data - the calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - the hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * should cover cost of putting calldata on-chain, and some overhead.\n   * actual overhead depends on the expected bundle size\n   */\n  async getPreVerificationGas(userOp) {\n    const p = await ethers__WEBPACK_IMPORTED_MODULE_4__.utils.resolveProperties(userOp);\n    return (0,_account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0__.calcPreVerificationGas)(p, this.overheads);\n  }\n\n  /**\n   * ABI-encode a user operation. used for calldata cost estimation\n   */\n  packUserOp(userOp) {\n    return (0,_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.packUserOp)(userOp, false);\n  }\n  async encodeUserOpCallDataAndGasLimit(detailsForUserOp, batchData) {\n    const value = parseNumber(detailsForUserOp.value) ?? ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0);\n    const callData = batchData ? detailsForUserOp.data : await this.prepareExecute(detailsForUserOp.target, value, detailsForUserOp.data).then(tx => tx.encode());\n    let callGasLimit;\n    const isPhantom = await this.checkAccountPhantom();\n    if (isPhantom) {\n      // when the account is not deployed yet, we simulate the call to the target contract directly\n      if (batchData) {\n        const limits = await Promise.all(batchData.targets.map((_, i) => this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: batchData.targets[i],\n          data: batchData.data[i],\n          value: batchData.values[i]\n        })));\n        callGasLimit = limits.reduce((a, b) => a.add(b), ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0));\n      } else {\n        callGasLimit = await this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: detailsForUserOp.target,\n          data: detailsForUserOp.data,\n          value: detailsForUserOp.value\n        });\n      }\n\n      // add 20% overhead for entrypoint checks\n      callGasLimit = callGasLimit.mul(120).div(100);\n      // if the estimation is too low, we use a fixed value of 500k\n      if (callGasLimit.lt(30000)) {\n        callGasLimit = ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(500000);\n      }\n    } else {\n      callGasLimit = parseNumber(detailsForUserOp.gasLimit) ?? (await this.provider.estimateGas({\n        from: this.entryPointAddress,\n        to: this.getAccountAddress(),\n        data: callData,\n        value: detailsForUserOp.value\n      }));\n    }\n    return {\n      callData,\n      callGasLimit\n    };\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n\n  /**\n   * create a UserOperation, filling all details (except signature)\n   * - if account is not yet created, add initCode to deploy it.\n   * - if gas or nonce are missing, read them from the chain (note that we can't fill gaslimit before the account is created)\n   * @param info - transaction details for the userOp\n   */\n  async createUnsignedUserOp(info, batchData) {\n    const {\n      callData,\n      callGasLimit\n    } = await this.encodeUserOpCallDataAndGasLimit(info, batchData);\n    const initCode = await this.getInitCode();\n    const initGas = await this.estimateCreationGas(initCode);\n    const verificationGasLimit = ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(await this.getVerificationGasLimit()).add(initGas);\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      const feeData = await (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.getDynamicFeeData)(this.provider);\n      if (!maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n      }\n      if (!maxFeePerGas) {\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        const network = await this.provider.getNetwork();\n        const chainId = network.chainId;\n        if (chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_8__.Celo.chainId || chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_8__.CeloAlfajoresTestnet.chainId || chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_8__.CeloBaklavaTestnet.chainId) {\n          maxPriorityFeePerGas = maxFeePerGas;\n        }\n      }\n    }\n    const partialUserOp = {\n      sender: this.getAccountAddress(),\n      nonce: info.nonce ?? this.getNonce(),\n      initCode,\n      callData,\n      callGasLimit,\n      verificationGasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      paymasterAndData: \"0x\"\n    };\n    let paymasterAndData;\n    let userOp = partialUserOp;\n    if (this.paymasterAPI) {\n      // fill (partial) preVerificationGas (all except the cost of the generated paymasterAndData)\n      try {\n        // userOp.preVerificationGas contains a promise that will resolve to an error.\n        await ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(userOp);\n        // eslint-disable-next-line no-empty\n      } catch (_) {}\n      const pmOp = {\n        sender: userOp.sender,\n        nonce: userOp.nonce,\n        initCode: userOp.initCode,\n        callData: userOp.callData,\n        callGasLimit: userOp.callGasLimit,\n        verificationGasLimit: userOp.verificationGasLimit,\n        maxFeePerGas: userOp.maxFeePerGas,\n        maxPriorityFeePerGas: userOp.maxPriorityFeePerGas,\n        // A dummy value here is required in order to calculate a correct preVerificationGas value.\n        paymasterAndData: DUMMY_PAYMASTER_AND_DATA,\n        signature: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.hexlify(Buffer.alloc(SIG_SIZE, 1))\n      };\n      userOp = await ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(pmOp);\n      const preVerificationGas = (0,_account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_0__.calcPreVerificationGas)(userOp);\n      userOp.preVerificationGas = preVerificationGas;\n      paymasterAndData = await this.paymasterAPI.getPaymasterAndData(userOp);\n      if (paymasterAndData === \"0x\") {\n        paymasterAndData = undefined;\n      }\n    }\n    if (paymasterAndData) {\n      userOp.paymasterAndData = paymasterAndData;\n      return {\n        ...userOp,\n        signature: \"\"\n      };\n    } else {\n      const modifiedOp = {\n        ...userOp,\n        paymasterAndData: \"0x\"\n      };\n      modifiedOp.preVerificationGas = await this.getPreVerificationGas(modifiedOp);\n      return {\n        ...modifiedOp,\n        signature: \"\"\n      };\n    }\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - the UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * helper method: create and sign a user operation.\n   * @param info - transaction details for the userOp\n   */\n  async createSignedUserOp(info, batchData) {\n    return await this.signUserOp(await this.createUnsignedUserOp(info, batchData));\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns the transactionHash this userOp was mined, or null if not found.\n   */\n  async getUserOpReceipt(userOpHash) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n      if (events[0]) {\n        return events[0].transactionHash;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return null;\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.ThirdwebSDK.fromPrivateKey(_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.A);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    console.log(\"Deploying smart wallet via factory\");\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    try {\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n    } catch (e) {\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\n    }\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(ethers__WEBPACK_IMPORTED_MODULE_4__.utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n}\n\nclass SmartWalletConnector extends _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.getChainProvider)(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.E;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.gasless ? this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey) : undefined,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - the transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.getAddress(item.signer) === ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @returns the awaitable transaction\n   */\n  async send(transaction) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - the transaction to execute\n   * @returns the transaction receipt\n   */\n  async execute(transaction) {\n    const tx = await this.send(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, batchData);\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - the transactions to execute\n   * @returns the transaction receipt\n   */\n  async executeBatch(transactions) {\n    const tx = await this.sendBatch(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction);\n  }\n  async executeRaw(transaction) {\n    const tx = await this.sendRaw(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, batch.batchData // batched tx flag\n    );\n  }\n\n  async executeBatchRaw(transactions) {\n    const tx = await this.sendBatchRaw(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n  async estimateRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0)\n    });\n  }\n  async estimateBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n  async estimateBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deploy() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      targets: [],\n      data: [],\n      values: []\n    } // batched tx flag to avoid hitting the Router fallback method\n    );\n\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy();\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns the account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n    }\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress());\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns the account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, batchData) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [{\n      callGasLimit: transactionGasLimit\n    }, gasPrice] = await Promise.all([this.accountApi.encodeUserOpCallDataAndGasLimit(tx, batchData), (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_7__.getGasPrice)(provider)]);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: ethers__WEBPACK_IMPORTED_MODULE_4__.utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_2__.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/wallets/evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenBoundSmartWalletConnector: function() { return /* binding */ TokenBoundSmartWalletConnector; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _smart_wallet_dist_thirdweb_dev_wallets_evm_connectors_smart_wallet_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\");\n/* harmony import */ var _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../dist/constants-5a6f7f26.browser.esm.js */ \"./node_modules/@thirdweb-dev/wallets/dist/constants-5a6f7f26.browser.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/wallets/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var _account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @account-abstraction/sdk */ \"./node_modules/@account-abstraction/sdk/dist/src/index.js\");\n/* harmony import */ var _account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @account-abstraction/contracts */ \"./node_modules/@account-abstraction/contracts/dist/index.js\");\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @account-abstraction/utils */ \"./node_modules/@account-abstraction/utils/dist/src/index.js\");\n/* harmony import */ var _account_abstraction_utils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_utils__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TokenBoundSmartWalletConnector extends _smart_wallet_dist_thirdweb_dev_wallets_evm_connectors_smart_wallet_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.SmartWalletConnector {\n  constructor(input) {\n    super({\n      ...input,\n      factoryAddress: input.registryAddress || _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.a\n    });\n    this.tbaConfig = input;\n    // TODO default account implementation address\n  }\n\n  defaultFactoryInfo() {\n    return {\n      createAccount: async factory => {\n        return factory.prepare(\"createAccount\", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt, ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async factory => {\n        return await factory.call(\"account\", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt]);\n      }\n    };\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL2V2bS9jb25uZWN0b3JzL3Rva2VuLWJvdW5kLXNtYXJ0LXdhbGxldC9kaXN0L3RoaXJkd2ViLWRldi13YWxsZXRzLWV2bS1jb25uZWN0b3JzLXRva2VuLWJvdW5kLXNtYXJ0LXdhbGxldC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFnQztBQUMrRjtBQUNwQztBQUMvQjtBQUNyQztBQUNXO0FBQ29CO0FBQ3hCO0FBQ1U7QUFDeUI7QUFDN0I7QUFDVDs7QUFFM0IsNkNBQTZDLG9JQUFvQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msc0VBQWdCO0FBQy9ELEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0xBQWdMLDBDQUFNO0FBQ3RMLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3dhbGxldHMvZXZtL2Nvbm5lY3RvcnMvdG9rZW4tYm91bmQtc21hcnQtd2FsbGV0L2Rpc3QvdGhpcmR3ZWItZGV2LXdhbGxldHMtZXZtLWNvbm5lY3RvcnMtdG9rZW4tYm91bmQtc21hcnQtd2FsbGV0LmJyb3dzZXIuZXNtLmpzPzEwNDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IFNtYXJ0V2FsbGV0Q29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vc21hcnQtd2FsbGV0L2Rpc3QvdGhpcmR3ZWItZGV2LXdhbGxldHMtZXZtLWNvbm5lY3RvcnMtc21hcnQtd2FsbGV0LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGEgYXMgRVJDNjU1MV9SRUdJU1RSWSB9IGZyb20gJy4uLy4uLy4uLy4uL2Rpc3QvY29uc3RhbnRzLTVhNmY3ZjI2LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vZGlzdC9jb25uZWN0b3ItMDU2ODlkNjguYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdldmVudGVtaXR0ZXIzJztcbmltcG9ydCAnQGFjY291bnQtYWJzdHJhY3Rpb24vc2RrJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vZGlzdC91cmwtYmM4OGIyYjYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5pbXBvcnQgJ0BhY2NvdW50LWFic3RyYWN0aW9uL2NvbnRyYWN0cyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2Rpc3QvZGVmaW5lUHJvcGVydHktYzhlY2RjMDcuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAYWNjb3VudC1hYnN0cmFjdGlvbi91dGlscyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvc2RrJztcblxuY2xhc3MgVG9rZW5Cb3VuZFNtYXJ0V2FsbGV0Q29ubmVjdG9yIGV4dGVuZHMgU21hcnRXYWxsZXRDb25uZWN0b3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHN1cGVyKHtcbiAgICAgIC4uLmlucHV0LFxuICAgICAgZmFjdG9yeUFkZHJlc3M6IGlucHV0LnJlZ2lzdHJ5QWRkcmVzcyB8fCBFUkM2NTUxX1JFR0lTVFJZXG4gICAgfSk7XG4gICAgdGhpcy50YmFDb25maWcgPSBpbnB1dDtcbiAgICAvLyBUT0RPIGRlZmF1bHQgYWNjb3VudCBpbXBsZW1lbnRhdGlvbiBhZGRyZXNzXG4gIH1cblxuICBkZWZhdWx0RmFjdG9yeUluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUFjY291bnQ6IGFzeW5jIGZhY3RvcnkgPT4ge1xuICAgICAgICByZXR1cm4gZmFjdG9yeS5wcmVwYXJlKFwiY3JlYXRlQWNjb3VudFwiLCBbdGhpcy50YmFDb25maWcuYWNjb3VudEltcGxlbWVudGF0aW9uLCB0aGlzLmNoYWluSWQsIHRoaXMudGJhQ29uZmlnLnRva2VuQ29udHJhY3QsIHRoaXMudGJhQ29uZmlnLnRva2VuSWQsIHRoaXMudGJhQ29uZmlnLnNhbHQsIGV0aGVycy51dGlscy50b1V0ZjhCeXRlcyhcIlwiKV0pO1xuICAgICAgfSxcbiAgICAgIGdldEFjY291bnRBZGRyZXNzOiBhc3luYyBmYWN0b3J5ID0+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZhY3RvcnkuY2FsbChcImFjY291bnRcIiwgW3RoaXMudGJhQ29uZmlnLmFjY291bnRJbXBsZW1lbnRhdGlvbiwgdGhpcy5jaGFpbklkLCB0aGlzLnRiYUNvbmZpZy50b2tlbkNvbnRyYWN0LCB0aGlzLnRiYUNvbmZpZy50b2tlbklkLCB0aGlzLnRiYUNvbmZpZy5zYWx0XSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgeyBUb2tlbkJvdW5kU21hcnRXYWxsZXRDb25uZWN0b3IgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/wallets/evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/debug/node_modules/ms/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/debug/node_modules/ms/index.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGVidWcvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/MjZlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/debug/node_modules/ms/index.js\n"));

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/browser.js\n"));

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/debug/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/common.js\n"));

/***/ }),

/***/ "./node_modules/@account-abstraction/contracts/artifacts/IEntryPoint.json":
/*!********************************************************************************!*\
  !*** ./node_modules/@account-abstraction/contracts/artifacts/IEntryPoint.json ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"IEntryPoint","sourceName":"contracts/interfaces/IEntryPoint.sol","abi":[{"inputs":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"paid","type":"uint256"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bool","name":"targetSuccess","type":"bool"},{"internalType":"bytes","name":"targetResult","type":"bytes"}],"name":"ExecutionResult","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureValidationFailed","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"}],"name":"ValidationResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct IEntryPoint.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"name":"ValidationResultWithAggregation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"factory","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"}],"name":"AccountDeployed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureAggregatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"actualGasCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualGasUsed","type":"uint256"}],"name":"UserOperationEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"UserOperationRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"contract IAggregator","name":"aggregator","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct IEntryPoint.UserOpsPerAggregator[]","name":"opsPerAggregator","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleAggregatedOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"ops","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"op","type":"tuple"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"targetCallData","type":"bytes"}],"name":"simulateHandleOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"simulateValidation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x","deployedBytecode":"0x","linkReferences":{},"deployedLinkReferences":{}}');

/***/ }),

/***/ "./node_modules/@account-abstraction/utils/package.json":
/*!**************************************************************!*\
  !*** ./node_modules/@account-abstraction/utils/package.json ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"name":"@account-abstraction/utils","version":"0.5.0","main":"./dist/src/index.js","license":"MIT","files":["dist/*","contracts/*","README.md"],"scripts":{"clear":"rm -rf dist artifacts cache src/types","hardhat-compile":"hardhat compile","lint-fix":"eslint -f unix . --fix","watch-tsc":"tsc -w --preserveWatchOutput","tsc":"tsc"},"dependencies":{"@account-abstraction/contracts":"^0.5.0","@ethersproject/abi":"^5.7.0","@ethersproject/providers":"^5.7.0","@openzeppelin/contracts":"^4.7.3","debug":"^4.3.4","ethers":"^5.7.0"},"devDependencies":{"@nomicfoundation/hardhat-toolbox":"^1.0.2","@nomiclabs/hardhat-ethers":"^2.0.0","hardhat":"^2.11.0"},"gitHead":"366c7b65af9be8a31f18db939ee05ee298c086cb"}');

/***/ })

}]);